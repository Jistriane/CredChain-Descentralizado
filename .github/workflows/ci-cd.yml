name: CredChain CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test and Build
  test-and-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        rust-version: [1.70.0, 1.71.0]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust-version }}
        components: rustfmt, clippy
        
    - name: Install dependencies
      run: |
        npm ci
        cd packages/api-gateway && npm ci
        cd ../eliza-runtime && npm ci
        cd ../web-frontend && npm ci
        cd ../mobile-app && npm ci
        
    - name: Run linting
      run: |
        npm run lint
        cd packages/api-gateway && npm run lint
        cd ../eliza-runtime && npm run lint
        cd ../web-frontend && npm run lint
        
    - name: Run tests
      run: |
        npm run test
        cd packages/api-gateway && npm run test
        cd ../eliza-runtime && npm run test
        cd ../web-frontend && npm run test
        
    - name: Run security audit
      run: |
        npm audit --audit-level=high
        cd packages/api-gateway && npm audit --audit-level=high
        cd ../eliza-runtime && npm audit --audit-level=high
        cd ../web-frontend && npm audit --audit-level=high
        
    - name: Build applications
      run: |
        cd packages/api-gateway && npm run build
        cd ../eliza-runtime && npm run build
        cd ../web-frontend && npm run build
        
    - name: Test Substrate pallets
      run: |
        cd packages/substrate-node
        cargo test --release
        
    - name: Test smart contracts
      run: |
        cd packages/substrate-node/contracts/credit-score-contract
        cargo test --release

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: test-and-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        languages: javascript, typescript, rust

  # Docker Build and Push
  docker-build:
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan]
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push API Gateway
      uses: docker/build-push-action@v5
      with:
        context: ./packages/api-gateway
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-gateway:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        
    - name: Build and push ElizaOS Runtime
      uses: docker/build-push-action@v5
      with:
        context: ./packages/eliza-runtime
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/eliza-runtime:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        
    - name: Build and push Web Frontend
      uses: docker/build-push-action@v5
      with:
        context: ./packages/web-frontend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web-frontend:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Deploy to EKS
      run: |
        aws eks update-kubeconfig --region us-east-1 --name credchain-staging
        kubectl apply -f k8s/
        kubectl set image deployment/api-gateway api-gateway=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-gateway:${{ github.sha }}
        kubectl set image deployment/eliza-runtime eliza-runtime=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/eliza-runtime:${{ github.sha }}
        kubectl set image deployment/web-frontend web-frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web-frontend:${{ github.sha }}
        
    - name: Run database migrations
      run: |
        kubectl exec -it deployment/api-gateway -- npm run migrate:up
        
    - name: Run integration tests
      run: |
        kubectl exec -it deployment/api-gateway -- npm run test:integration

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Deploy to EKS
      run: |
        aws eks update-kubeconfig --region us-east-1 --name credchain-production
        kubectl apply -f k8s/
        kubectl set image deployment/api-gateway api-gateway=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-gateway:${{ github.sha }}
        kubectl set image deployment/eliza-runtime eliza-runtime=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/eliza-runtime:${{ github.sha }}
        kubectl set image deployment/web-frontend web-frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web-frontend:${{ github.sha }}
        
    - name: Run database migrations
      run: |
        kubectl exec -it deployment/api-gateway -- npm run migrate:up
        
    - name: Run smoke tests
      run: |
        kubectl exec -it deployment/api-gateway -- npm run test:smoke
        
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run performance tests
      run: |
        cd packages/tests
        npm run test:performance
        
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: packages/tests/results/

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Clean up old images
      uses: actions/delete-package-versions@v4
      with:
        package-name: ${{ env.IMAGE_NAME }}
        min-versions-to-keep: 10
        delete-only-untagged-versions: 'true'