const fs = require("fs");
const path = require("path");

async function main() {
  console.log("üîí Iniciando auditoria de seguran√ßa dos contratos...");
  console.log("==================================================");

  const auditResults = [];
  let criticalIssues = 0;
  let warnings = 0;

  // 1. Verificar modificadores de acesso
  console.log("\n1Ô∏è‚É£ Verificando modificadores de acesso...");
  const contractFiles = [
    "CredChainCreditScore.sol",
    "CredChainPaymentRegistry.sol",
    "CredChainIdentityVerification.sol",
    "CredChainOracleIntegration.sol"
  ];

  for (const contractFile of contractFiles) {
    const contractPath = path.join(__dirname, "..", "contracts", contractFile);
    if (fs.existsSync(contractPath)) {
      const content = fs.readFileSync(contractPath, "utf8");
      
      // Verificar modificadores de acesso
      const accessModifiers = [
        "onlyOwner",
        "onlyAuthorizedCalculator", 
        "onlyAuthorizedOracle",
        "onlyAuthorizedVerifier"
      ];
      
      const foundModifiers = accessModifiers.filter(modifier => 
        content.includes(modifier)
      );
      
      console.log(`üìÑ ${contractFile}:`);
      console.log(`   ‚úÖ Modificadores encontrados: ${foundModifiers.length}/${accessModifiers.length}`);
      
      if (foundModifiers.length === accessModifiers.length) {
        auditResults.push({ 
          contract: contractFile, 
          check: "Modificadores de Acesso", 
          status: "‚úÖ PASS" 
        });
      } else {
        auditResults.push({ 
          contract: contractFile, 
          check: "Modificadores de Acesso", 
          status: "‚ùå FAIL" 
        });
        criticalIssues++;
      }
    }
  }

  // 2. Verificar valida√ß√£o de entradas
  console.log("\n2Ô∏è‚É£ Verificando valida√ß√£o de entradas...");
  for (const contractFile of contractFiles) {
    const contractPath = path.join(__dirname, "..", "contracts", contractFile);
    if (fs.existsSync(contractPath)) {
      const content = fs.readFileSync(contractPath, "utf8");
      
      // Verificar valida√ß√µes
      const validations = [
        "require(",
        "require(_user != address(0)",
        "require(_score >= MIN_SCORE",
        "require(_weight <= 100"
      ];
      
      const foundValidations = validations.filter(validation => 
        content.includes(validation)
      );
      
      console.log(`üìÑ ${contractFile}:`);
      console.log(`   ‚úÖ Valida√ß√µes encontradas: ${foundValidations.length}`);
      
      if (foundValidations.length >= 3) {
        auditResults.push({ 
          contract: contractFile, 
          check: "Valida√ß√£o de Entradas", 
          status: "‚úÖ PASS" 
        });
      } else {
        auditResults.push({ 
          contract: contractFile, 
          check: "Valida√ß√£o de Entradas", 
          status: "‚ö†Ô∏è  WARNING" 
        });
        warnings++;
      }
    }
  }

  // 3. Verificar prote√ß√£o contra reentr√¢ncia
  console.log("\n3Ô∏è‚É£ Verificando prote√ß√£o contra reentr√¢ncia...");
  for (const contractFile of contractFiles) {
    const contractPath = path.join(__dirname, "..", "contracts", contractFile);
    if (fs.existsSync(contractPath)) {
      const content = fs.readFileSync(contractPath, "utf8");
      
      // Verificar se h√° prote√ß√£o contra reentr√¢ncia
      const reentrancyProtection = [
        "nonReentrant",
        "ReentrancyGuard",
        "locked"
      ];
      
      const hasProtection = reentrancyProtection.some(protection => 
        content.includes(protection)
      );
      
      console.log(`üìÑ ${contractFile}:`);
      console.log(`   ${hasProtection ? "‚úÖ" : "‚ö†Ô∏è"} Prote√ß√£o contra reentr√¢ncia: ${hasProtection ? "SIM" : "N√ÉO"}`);
      
      if (hasProtection) {
        auditResults.push({ 
          contract: contractFile, 
          check: "Prote√ß√£o Reentr√¢ncia", 
          status: "‚úÖ PASS" 
        });
      } else {
        auditResults.push({ 
          contract: contractFile, 
          check: "Prote√ß√£o Reentr√¢ncia", 
          status: "‚ö†Ô∏è  WARNING" 
        });
        warnings++;
      }
    }
  }

  // 4. Verificar eventos de auditoria
  console.log("\n4Ô∏è‚É£ Verificando eventos de auditoria...");
  for (const contractFile of contractFiles) {
    const contractPath = path.join(__dirname, "..", "contracts", contractFile);
    if (fs.existsSync(contractPath)) {
      const content = fs.readFileSync(contractPath, "utf8");
      
      // Verificar eventos
      const eventCount = (content.match(/event\s+\w+/g) || []).length;
      const emitCount = (content.match(/emit\s+\w+/g) || []).length;
      
      console.log(`üìÑ ${contractFile}:`);
      console.log(`   üìä Eventos: ${eventCount}, Emits: ${emitCount}`);
      
      if (eventCount >= 3 && emitCount >= 3) {
        auditResults.push({ 
          contract: contractFile, 
          check: "Eventos de Auditoria", 
          status: "‚úÖ PASS" 
        });
      } else {
        auditResults.push({ 
          contract: contractFile, 
          check: "Eventos de Auditoria", 
          status: "‚ö†Ô∏è  WARNING" 
        });
        warnings++;
      }
    }
  }

  // 5. Verificar constantes de seguran√ßa
  console.log("\n5Ô∏è‚É£ Verificando constantes de seguran√ßa...");
  for (const contractFile of contractFiles) {
    const contractPath = path.join(__dirname, "..", "contracts", contractFile);
    if (fs.existsSync(contractPath)) {
      const content = fs.readFileSync(contractPath, "utf8");
      
      // Verificar constantes
      const constants = [
        "MAX_SCORE",
        "MIN_SCORE", 
        "LATE_PAYMENT_THRESHOLD",
        "DEFAULT_THRESHOLD",
        "DATA_EXPIRY"
      ];
      
      const foundConstants = constants.filter(constant => 
        content.includes(constant)
      );
      
      console.log(`üìÑ ${contractFile}:`);
      console.log(`   ‚úÖ Constantes encontradas: ${foundConstants.length}`);
      
      if (foundConstants.length >= 2) {
        auditResults.push({ 
          contract: contractFile, 
          check: "Constantes de Seguran√ßa", 
          status: "‚úÖ PASS" 
        });
      } else {
        auditResults.push({ 
          contract: contractFile, 
          check: "Constantes de Seguran√ßa", 
          status: "‚ö†Ô∏è  WARNING" 
        });
        warnings++;
      }
    }
  }

  // 6. Verificar aus√™ncia de dados mocados
  console.log("\n6Ô∏è‚É£ Verificando aus√™ncia de dados mocados...");
  for (const contractFile of contractFiles) {
    const contractPath = path.join(__dirname, "..", "contracts", contractFile);
    if (fs.existsSync(contractPath)) {
      const content = fs.readFileSync(contractPath, "utf8");
      
      // Verificar padr√µes de dados mocados
      const mockPatterns = [
        "mock",
        "test", 
        "example",
        "dummy",
        "fake",
        "hardcoded"
      ];
      
      const foundMocks = mockPatterns.filter(pattern => 
        content.toLowerCase().includes(pattern)
      );
      
      console.log(`üìÑ ${contractFile}:`);
      console.log(`   ${foundMocks.length === 0 ? "‚úÖ" : "‚ùå"} Dados mocados: ${foundMocks.length === 0 ? "NENHUM" : foundMocks.join(", ")}`);
      
      if (foundMocks.length === 0) {
        auditResults.push({ 
          contract: contractFile, 
          check: "Dados Mocados", 
          status: "‚úÖ PASS" 
        });
      } else {
        auditResults.push({ 
          contract: contractFile, 
          check: "Dados Mocados", 
          status: "‚ùå FAIL" 
        });
        criticalIssues++;
      }
    }
  }

  // 7. Verificar conformidade com Polkadot
  console.log("\n7Ô∏è‚É£ Verificando conformidade com Polkadot...");
  for (const contractFile of contractFiles) {
    const contractPath = path.join(__dirname, "..", "contracts", contractFile);
    if (fs.existsSync(contractPath)) {
      const content = fs.readFileSync(contractPath, "utf8");
      
      // Verificar conformidade
      const polkadotCompliance = [
        "pragma solidity ^0.8.19",
        "SPDX-License-Identifier",
        "contract ",
        "function ",
        "event "
      ];
      
      const foundCompliance = polkadotCompliance.filter(compliance => 
        content.includes(compliance)
      );
      
      console.log(`üìÑ ${contractFile}:`);
      console.log(`   ‚úÖ Conformidade: ${foundCompliance.length}/${polkadotCompliance.length}`);
      
      if (foundCompliance.length >= 4) {
        auditResults.push({ 
          contract: contractFile, 
          check: "Conformidade Polkadot", 
          status: "‚úÖ PASS" 
        });
      } else {
        auditResults.push({ 
          contract: contractFile, 
          check: "Conformidade Polkadot", 
          status: "‚ùå FAIL" 
        });
        criticalIssues++;
      }
    }
  }

  // Resumo da auditoria
  console.log("\nüìã RESUMO DA AUDITORIA DE SEGURAN√áA:");
  console.log("====================================");
  
  const passCount = auditResults.filter(r => r.status === "‚úÖ PASS").length;
  const failCount = auditResults.filter(r => r.status === "‚ùå FAIL").length;
  const warningCount = auditResults.filter(r => r.status === "‚ö†Ô∏è  WARNING").length;
  
  console.log(`‚úÖ Passou: ${passCount}`);
  console.log(`‚ùå Falhou: ${failCount}`);
  console.log(`‚ö†Ô∏è  Avisos: ${warningCount}`);
  console.log(`üîí Total: ${auditResults.length}`);
  
  if (criticalIssues === 0) {
    console.log("\nüéâ AUDITORIA DE SEGURAN√áA APROVADA!");
    console.log("‚úÖ Nenhum problema cr√≠tico encontrado");
    console.log("üöÄ Contratos prontos para mainnet");
  } else {
    console.log("\n‚ö†Ô∏è  AUDITORIA DE SEGURAN√áA COM PROBLEMAS!");
    console.log(`‚ùå ${criticalIssues} problemas cr√≠ticos encontrados`);
    console.log("üîß Corrija os problemas antes do deploy");
  }

  if (warnings > 0) {
    console.log(`\n‚ö†Ô∏è  ${warnings} avisos encontrados - considere revisar`);
  }

  // Salvar relat√≥rio de auditoria
  const auditReport = {
    timestamp: new Date().toISOString(),
    criticalIssues: criticalIssues,
    warnings: warnings,
    totalChecks: auditResults.length,
    results: auditResults,
    status: criticalIssues === 0 ? "APPROVED" : "FAILED",
    recommendations: criticalIssues === 0 ? 
      ["Sistema aprovado para mainnet"] : 
      ["Corrigir problemas cr√≠ticos antes do deploy"]
  };

  const reportPath = path.join(__dirname, "..", "security-audit-report.json");
  fs.writeFileSync(reportPath, JSON.stringify(auditReport, null, 2));
  console.log(`\nüíæ Relat√≥rio de auditoria salvo em: ${reportPath}`);
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("‚ùå Erro durante a auditoria:", error);
    process.exit(1);
  });
