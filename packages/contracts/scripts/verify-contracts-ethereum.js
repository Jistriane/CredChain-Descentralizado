const { ethers } = require("hardhat");

async function main() {
  console.log("üîç Verificando contratos CredChain na Ethereum...");

  // Verificar se estamos em mainnet
  const isMainnet = hre.network.name === "mainnet";
  const isTestnet = ["sepolia", "goerli"].includes(hre.network.name);

  if (isMainnet) {
    console.log("‚ö†Ô∏è  ATEN√á√ÉO: Verifica√ß√£o em ETHEREUM MAINNET!");
  } else if (isTestnet) {
    console.log("üß™ Verifica√ß√£o em testnet Ethereum:", hre.network.name);
  }

  // Carregar endere√ßos dos contratos do arquivo de deployment
  const fs = require('fs');
  const path = require('path');
  
  const deploymentFile = path.join(__dirname, '..', 'deployments', `ethereum-${hre.network.name}-deployment.json`);
  
  if (!fs.existsSync(deploymentFile)) {
    console.error("‚ùå Arquivo de deployment n√£o encontrado:", deploymentFile);
    console.log("üí° Execute o deploy primeiro: npm run deploy:ethereum:mainnet");
    process.exit(1);
  }

  const deploymentData = JSON.parse(fs.readFileSync(deploymentFile, 'utf8'));
  console.log("üìã Carregando endere√ßos do deployment...");

  const contracts = [
    {
      name: "CredChainCreditScore",
      address: deploymentData.CredChainCreditScore
    },
    {
      name: "CredChainPaymentRegistry", 
      address: deploymentData.CredChainPaymentRegistry
    },
    {
      name: "CredChainIdentityVerification",
      address: deploymentData.CredChainIdentityVerification
    },
    {
      name: "CredChainOracleIntegration",
      address: deploymentData.CredChainOracleIntegration
    }
  ];

  console.log("\nüîç Verificando contratos no Etherscan...");
  
  for (const contract of contracts) {
    try {
      console.log(`\nüìä Verificando ${contract.name}...`);
      console.log(`üìç Endere√ßo: ${contract.address}`);
      
      // Verificar se o contrato existe
      const code = await ethers.provider.getCode(contract.address);
      if (code === "0x") {
        console.log("‚ùå Contrato n√£o encontrado no endere√ßo especificado");
        continue;
      }
      
      console.log("‚úÖ Contrato encontrado na blockchain");
      
      // Verificar se j√° est√° verificado no Etherscan
      try {
        const response = await fetch(`https://api.etherscan.io/api?module=contract&action=getsourcecode&address=${contract.address}&apikey=${process.env.ETHERSCAN_API_KEY}`);
        const data = await response.json();
        
        if (data.result && data.result[0] && data.result[0].SourceCode) {
          console.log("‚úÖ Contrato j√° verificado no Etherscan");
        } else {
          console.log("‚ö†Ô∏è  Contrato n√£o verificado no Etherscan");
          console.log("üí° Execute a verifica√ß√£o manual:");
          console.log(`npx hardhat verify --network ${hre.network.name} ${contract.address}`);
        }
      } catch (error) {
        console.log("‚ö†Ô∏è  Erro ao verificar no Etherscan:", error.message);
      }
      
    } catch (error) {
      console.log(`‚ùå Erro ao verificar ${contract.name}:`, error.message);
    }
  }

  // Verificar configura√ß√µes de rede
  console.log("\nüåê Verificando configura√ß√µes de rede...");
  console.log("Network:", hre.network.name);
  console.log("Chain ID:", hre.network.config.chainId);
  console.log("RPC URL:", hre.network.config.url);

  // Verificar saldo da conta
  const [deployer] = await ethers.getSigners();
  const balance = await deployer.provider.getBalance(deployer.address);
  const balanceInEth = ethers.formatEther(balance);
  console.log("üí∞ Saldo da conta:", balanceInEth, "ETH");

  // Verificar se h√° transa√ß√µes pendentes
  const pendingTxCount = await deployer.provider.getTransactionCount(deployer.address, "pending");
  const confirmedTxCount = await deployer.provider.getTransactionCount(deployer.address, "confirmed");
  
  if (pendingTxCount > confirmedTxCount) {
    console.log("‚ö†Ô∏è  H√° transa√ß√µes pendentes:", pendingTxCount - confirmedTxCount);
  } else {
    console.log("‚úÖ Nenhuma transa√ß√£o pendente");
  }

  console.log("\nüìã Resumo da Verifica√ß√£o:");
  console.log("========================");
  console.log("üåê Network:", hre.network.name);
  console.log("üë§ Deployer:", deployer.address);
  console.log("üí∞ Saldo:", balanceInEth, "ETH");
  console.log("üìä Contratos:", contracts.length);
  
  if (isMainnet) {
    console.log("\nüö® CHECKLIST PARA MAINNET:");
    console.log("‚ñ° Todos os contratos verificados no Etherscan");
    console.log("‚ñ° Or√°culos e verificadores configurados");
    console.log("‚ñ° Testes executados com sucesso");
    console.log("‚ñ° Monitoramento configurado");
    console.log("‚ñ° Documenta√ß√£o atualizada");
    console.log("‚ñ° Equipe notificada sobre o deploy");
  }

  console.log("\nüéâ Verifica√ß√£o conclu√≠da!");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("‚ùå Erro durante a verifica√ß√£o:", error);
    process.exit(1);
  });
