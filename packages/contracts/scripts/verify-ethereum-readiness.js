const { ethers } = require("hardhat");
const fs = require('fs');
const path = require('path');

async function main() {
  console.log("üîç Verificando prontid√£o para deploy na Ethereum Mainnet...");
  
  // Verificar se estamos em ambiente Hardhat
  if (typeof hre === 'undefined') {
    console.log("‚ö†Ô∏è  Executando fora do ambiente Hardhat");
    console.log("üí° Execute com: npx hardhat run scripts/verify-ethereum-readiness.js");
  }

  const checks = [];
  let passed = 0;
  let total = 0;

  // Configura√ß√µes de mainnet Ethereum
  const mainnetConfig = {
    requiredEnvVars: [
      'PRIVATE_KEY',
      'ETHEREUM_RPC_URL',
      'ETHERSCAN_API_KEY'
    ],
    minBalance: 0.01, // ETH m√≠nimo necess√°rio
    requiredGasPrice: 20, // Gwei m√≠nimo
    networkName: 'mainnet',
    chainId: 1
  };

  // 1. Verificar vari√°veis de ambiente
  console.log("\nüîß Verificando vari√°veis de ambiente...");
  total++;
  
  const missingEnvVars = mainnetConfig.requiredEnvVars.filter(varName => {
    return !process.env[varName] || process.env[varName] === `your_${varName.toLowerCase()}_here`;
  });

  if (missingEnvVars.length === 0) {
    console.log("‚úÖ Todas as vari√°veis de ambiente configuradas");
    checks.push({ name: "Vari√°veis de ambiente", status: "‚úÖ PASS" });
    passed++;
  } else {
    console.log("‚ùå Vari√°veis de ambiente faltando:", missingEnvVars.join(", "));
    checks.push({ name: "Vari√°veis de ambiente", status: "‚ùå FAIL" });
  }

  // 2. Verificar configura√ß√£o de rede
  console.log("\nüåê Verificando configura√ß√£o de rede...");
  total++;
  
  let network = "localhost";
  let isMainnet = false;
  
  if (typeof hre !== 'undefined') {
    network = hre.network.name;
    isMainnet = network === "mainnet";
  }
  
  if (isMainnet) {
    console.log("‚úÖ Rede configurada para Ethereum mainnet:", network);
    checks.push({ name: "Rede Mainnet", status: "‚úÖ PASS" });
    passed++;
  } else {
    console.log("‚ö†Ô∏è  Rede atual:", network, "- Certifique-se de que est√° configurada para mainnet");
    checks.push({ name: "Rede Mainnet", status: "‚ö†Ô∏è  WARNING" });
  }

  // 3. Verificar saldo da conta
  console.log("\nüí∞ Verificando saldo da conta...");
  total++;
  
  try {
    const [deployer] = await ethers.getSigners();
    const balance = await deployer.provider.getBalance(deployer.address);
    const balanceInEth = parseFloat(ethers.formatEther(balance));
    
    console.log("üí∞ Saldo da conta:", balanceInEth, "ETH");
    
    if (balanceInEth >= mainnetConfig.minBalance) {
      console.log("‚úÖ Saldo suficiente para deploy");
      checks.push({ name: "Saldo da conta", status: "‚úÖ PASS" });
      passed++;
    } else {
      console.log("‚ùå Saldo insuficiente. M√≠nimo necess√°rio:", mainnetConfig.minBalance, "ETH");
      checks.push({ name: "Saldo da conta", status: "‚ùå FAIL" });
    }
  } catch (error) {
    console.log("‚ùå Erro ao verificar saldo:", error.message);
    checks.push({ name: "Saldo da conta", status: "‚ùå FAIL" });
  }

  // 4. Verificar compila√ß√£o dos contratos
  console.log("\nüî® Verificando compila√ß√£o dos contratos...");
  total++;
  
  try {
    await hre.run("compile");
    console.log("‚úÖ Contratos compilados com sucesso");
    checks.push({ name: "Compila√ß√£o", status: "‚úÖ PASS" });
    passed++;
  } catch (error) {
    console.log("‚ùå Erro na compila√ß√£o:", error.message);
    checks.push({ name: "Compila√ß√£o", status: "‚ùå FAIL" });
  }

  // 5. Verificar testes
  console.log("\nüß™ Verificando testes...");
  total++;
  
  try {
    await hre.run("test");
    console.log("‚úÖ Todos os testes passaram");
    checks.push({ name: "Testes", status: "‚úÖ PASS" });
    passed++;
  } catch (error) {
    console.log("‚ùå Erro nos testes:", error.message);
    checks.push({ name: "Testes", status: "‚ùå FAIL" });
  }

  // 6. Verificar auditoria de seguran√ßa
  console.log("\nüîí Verificando auditoria de seguran√ßa...");
  total++;
  
  const securityReportPath = path.join(__dirname, '..', 'security-audit-report.json');
  if (fs.existsSync(securityReportPath)) {
    const securityReport = JSON.parse(fs.readFileSync(securityReportPath, 'utf8'));
    
    if (securityReport.criticalIssues === 0) {
      console.log("‚úÖ Nenhum problema cr√≠tico de seguran√ßa encontrado");
      checks.push({ name: "Auditoria de seguran√ßa", status: "‚úÖ PASS" });
      passed++;
    } else {
      console.log("‚ùå Problemas cr√≠ticos de seguran√ßa encontrados:", securityReport.criticalIssues);
      checks.push({ name: "Auditoria de seguran√ßa", status: "‚ùå FAIL" });
    }
  } else {
    console.log("‚ö†Ô∏è  Relat√≥rio de auditoria n√£o encontrado");
    checks.push({ name: "Auditoria de seguran√ßa", status: "‚ö†Ô∏è  WARNING" });
  }

  // 7. Verificar otimiza√ß√£o de gas
  console.log("\n‚õΩ Verificando otimiza√ß√£o de gas...");
  total++;
  
  try {
    const gasReport = await hre.run("gas");
    console.log("‚úÖ Relat√≥rio de gas gerado");
    checks.push({ name: "Otimiza√ß√£o de gas", status: "‚úÖ PASS" });
    passed++;
  } catch (error) {
    console.log("‚ö†Ô∏è  Erro ao gerar relat√≥rio de gas:", error.message);
    checks.push({ name: "Otimiza√ß√£o de gas", status: "‚ö†Ô∏è  WARNING" });
  }

  // 8. Verificar configura√ß√£o de rede
  console.log("\nüåê Verificando configura√ß√£o de rede...");
  total++;
  
  const networkConfig = hre.network.config;
  if (networkConfig.chainId === 1 && networkConfig.url.includes('mainnet')) {
    console.log("‚úÖ Configura√ß√£o de rede correta para Ethereum mainnet");
    checks.push({ name: "Configura√ß√£o de rede", status: "‚úÖ PASS" });
    passed++;
  } else {
    console.log("‚ùå Configura√ß√£o de rede incorreta");
    checks.push({ name: "Configura√ß√£o de rede", status: "‚ùå FAIL" });
  }

  // Gerar relat√≥rio final
  console.log("\nüìä Relat√≥rio de Prontid√£o:");
  console.log("=========================");
  
  checks.forEach(check => {
    console.log(`${check.status} ${check.name}`);
  });

  const readinessPercentage = Math.round((passed / total) * 100);
  console.log(`\nüìà Prontid√£o: ${readinessPercentage}% (${passed}/${total})`);

  if (passed === total) {
    console.log("\nüéâ SISTEMA PRONTO PARA ETHEREUM MAINNET!");
    console.log("üöÄ Pode proceder com o deploy na mainnet");
    console.log("\nüìã Pr√≥ximos passos:");
    console.log("1. Execute: npm run deploy:ethereum:mainnet");
    console.log("2. Verifique os contratos: npm run verify:ethereum:mainnet");
    console.log("3. Configure or√°culos e verificadores");
    console.log("4. Teste todas as funcionalidades");
  } else {
    console.log("\n‚ö†Ô∏è  SISTEMA N√ÉO EST√Å PRONTO PARA MAINNET!");
    console.log("üîß Corrija os problemas identificados antes de prosseguir");
    
    const failedChecks = checks.filter(check => check.status.includes("‚ùå"));
    if (failedChecks.length > 0) {
      console.log("\n‚ùå Problemas cr√≠ticos:");
      failedChecks.forEach(check => {
        console.log(`- ${check.name}`);
      });
    }
  }

  // Salvar relat√≥rio
  const report = {
    timestamp: new Date().toISOString(),
    network: "ethereum",
    isMainnet: true,
    checks: checks,
    allPassed: passed === total,
    readinessPercentage: readinessPercentage,
    recommendations: passed === total ? 
      ["Sistema pronto para deploy na mainnet"] : 
      ["Corrigir problemas identificados antes do deploy"]
  };

  const reportPath = path.join(__dirname, '..', 'ethereum-readiness-report.json');
  fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
  console.log(`\nüíæ Relat√≥rio salvo em: ${reportPath}`);
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("‚ùå Erro durante a verifica√ß√£o:", error);
    process.exit(1);
  });
