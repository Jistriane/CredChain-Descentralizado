/**
 * Fraud Detector Agent - Agente de Detec√ß√£o de Fraude
 * 
 * Detecta padr√µes suspeitos em tempo real usando ML
 */

import { Character, Action, ModelProviderName } from "@elizaos/core";

/**
 * Agente de Detec√ß√£o de Fraude
 */
export const fraudDetectorAgent: Character = {
  name: "Fraud Detector",
  username: "fraud_ai",
  modelProvider: ModelProviderName.ANTHROPIC,
  
  bio: [
    "Analiso padr√µes suspeitos em tempo real usando ML",
    "Protejo usu√°rios e institui√ß√µes contra fraudes",
    "Aprendo com cada tentativa de fraude detectada"
  ],
  
  knowledge: [
    "T√©cnicas de detec√ß√£o de anomalias: Isolation Forest, One-Class SVM",
    "Padr√µes comuns de fraude em transa√ß√µes financeiras",
    "An√°lise de comportamento do usu√°rio para identificar desvios",
    "Integra√ß√£o com sistemas de alerta e bloqueio de transa√ß√µes",
    "Machine Learning: Random Forest, Neural Networks, Ensemble Methods"
  ],
  
  style: {
    all: [
      "Seja vigilante e proativo",
      "Comunique claramente as a√ß√µes tomadas e os motivos de seguran√ßa",
      "Mantenha um tom de prote√ß√£o e assist√™ncia"
    ]
  },
  
  adjectives: ["vigilante", "protetor", "anal√≠tico", "r√°pido", "seguro"]
};

/**
 * A√ß√£o de Detec√ß√£o de Fraude
 */
export const detectFraudAction: Action = {
  name: "DETECT_FRAUD",
  similes: ["detectar fraude", "verificar transa√ß√£o suspeita", "analisar risco", "investigar atividade"],
  description: "Analisa uma transa√ß√£o ou atividade para detectar poss√≠veis fraudes",
  
  validate: async (runtime: any, message: any) => {
    // Pode validar se a mensagem cont√©m dados de transa√ß√£o ou atividade
    return message.content.transactionId || message.content.activity;
  },
  
  handler: async (runtime: any, message: any, state: any, options: any, callback: any) => {
    try {
      const { userId, transactionId, activity } = message.content;
      let fraudDetected = false;
      let details = "Nenhuma fraude detectada.";
      let severity = "low";
      
      // Simula√ß√£o de chamada a um servi√ßo de detec√ß√£o de fraude externo ou modelo de ML
      const fraudAnalysis = await analyzeFraudPatterns(userId, transactionId, activity, runtime);
      
      if (fraudAnalysis.isFraudulent) {
        fraudDetected = true;
        details = fraudAnalysis.reason || "Atividade suspeita detectada por modelo de ML.";
        severity = fraudAnalysis.severity || "high";
        
        // Notificar o Compliance Guardian e potencialmente bloquear a transa√ß√£o
        await runtime.callAgentAction('Compliance Guardian', 'COMPLIANCE_CHECK', {
          operation: {
            type: 'fraud_alert',
            userId,
            details,
            severity,
            timestamp: new Date().toISOString()
          }
        });
        
        // Registrar o evento de fraude no banco de dados
        await runtime.adapters.database.query(
          'INSERT INTO fraud_detection (user_id, event_type, severity, ml_confidence, details, detected_at) VALUES ($1, $2, $3, $4, $5, $6)',
          [userId, 'transaction_fraud', severity, fraudAnalysis.confidence, details, new Date()]
        );
        
        // Enviar notifica√ß√£o de seguran√ßa
        await runtime.adapters.notifications.sendNotification({
          userId,
          title: 'üö® Alerta de Seguran√ßa',
          message: `Atividade suspeita detectada: ${details}`,
          type: 'error',
          priority: severity === 'high' ? 'urgent' : 'high',
          channels: ['email', 'sms', 'push', 'in_app']
        });
      }
      
      // Rastrear evento de an√°lise
      await runtime.adapters.analytics.trackEvent({
        eventName: 'fraud_analysis',
        userId,
        properties: {
          transactionId,
          fraudDetected,
          severity,
          confidence: fraudAnalysis.confidence
        }
      });
      
      const response = generateFraudResponse(fraudDetected, details, severity, fraudAnalysis.confidence);
      
      callback({
        text: response,
        metadata: {
          fraudDetected,
          severity,
          confidence: fraudAnalysis.confidence,
          details,
          actions: fraudDetected ? ['blocked', 'notified', 'logged'] : ['monitored']
        }
      });
      
      return true;
    } catch (error) {
      console.error('Erro na detec√ß√£o de fraude:', error);
      callback({
        text: "‚ùå Erro na an√°lise de fraude. Transa√ß√£o bloqueada por seguran√ßa.",
        metadata: { error: true, blocked: true }
      });
      return false;
    }
  },
  
  examples: [
    [
      { 
        user: "{{user1}}", 
        content: { text: "Minha transa√ß√£o de R$5.000 para um novo benefici√°rio foi bloqueada. Por qu√™?" } 
      },
      { 
        user: "{{agent}}", 
        content: { 
          text: "üîç **An√°lise de Seguran√ßa Completa**\n\n" +
                "‚úÖ **Verifica√ß√£o de Identidade**: Aprovada\n" +
                "üìç **Geolocaliza√ß√£o**: Normal\n" +
                "‚è∞ **Hor√°rio**: Dentro do padr√£o\n" +
                "üí∞ **Valor**: Compat√≠vel com hist√≥rico\n" +
                "üîê **Dispositivo**: Reconhecido\n\n" +
                "üõ°Ô∏è **Status**: Nenhuma atividade suspeita detectada\n" +
                "üìä **Confian√ßa**: 98%\n\n" +
                "üí° **Dica**: Continue monitorando suas transa√ß√µes regularmente." 
        } 
      }
    ]
  ]
};

/**
 * Analisa padr√µes de fraude usando ML
 */
async function analyzeFraudPatterns(userId: string, transactionId: string, activity: any, runtime: any): Promise<FraudAnalysis> {
  try {
    // Buscar hist√≥rico do usu√°rio
    const userHistory = await getUserTransactionHistory(userId, runtime);
    
    // Buscar padr√µes comportamentais
    const behaviorPatterns = await getUserBehaviorPatterns(userId, runtime);
    
    // Aplicar modelos de ML (simulado)
    const mlResults = await applyMLModels(activity, userHistory, behaviorPatterns);
    
    // Verificar regras de neg√≥cio
    const ruleResults = await checkBusinessRules(activity, userHistory);
    
    // Combinar resultados
    const combinedScore = (mlResults.score * 0.7) + (ruleResults.score * 0.3);
    
    return {
      isFraudulent: combinedScore > 0.7,
      confidence: combinedScore,
      severity: getSeverityLevel(combinedScore),
      reason: generateFraudReason(mlResults, ruleResults),
      factors: {
        ml: mlResults,
        rules: ruleResults
      }
    };
  } catch (error) {
    console.error('Erro na an√°lise de padr√µes de fraude:', error);
    return {
      isFraudulent: true, // Em caso de erro, bloquear por seguran√ßa
      confidence: 0.9,
      severity: 'high',
      reason: 'Erro na an√°lise - bloqueado por seguran√ßa'
    };
  }
}

/**
 * Busca hist√≥rico de transa√ß√µes do usu√°rio
 */
async function getUserTransactionHistory(userId: string, runtime: any): Promise<any[]> {
  try {
    const result = await runtime.adapters.database.query(
      `SELECT 
        amount, 
        created_at, 
        status,
        recipient,
        location,
        device_info
      FROM payments 
      WHERE user_id = $1 
      ORDER BY created_at DESC 
      LIMIT 100`,
      [userId]
    );
    
    return result.rows;
  } catch (error) {
    console.error('Erro ao buscar hist√≥rico do usu√°rio:', error);
    return [];
  }
}

/**
 * Busca padr√µes comportamentais do usu√°rio
 */
async function getUserBehaviorPatterns(userId: string, runtime: any): Promise<any> {
  try {
    const behavior = await runtime.adapters.analytics.getUserBehavior(userId);
    return behavior || {
      loginFrequency: 0,
      transactionPatterns: [],
      riskScore: 0.5,
      preferences: {}
    };
  } catch (error) {
    console.error('Erro ao buscar padr√µes comportamentais:', error);
    return {
      loginFrequency: 0,
      transactionPatterns: [],
      riskScore: 0.5,
      preferences: {}
    };
  }
}

/**
 * Aplica modelos de ML para detec√ß√£o de fraude
 */
async function applyMLModels(activity: any, userHistory: any[], behaviorPatterns: any): Promise<MLResults> {
  // Simula√ß√£o de modelos de ML
  const features = extractFeatures(activity, userHistory, behaviorPatterns);
  
  // Isolation Forest para detec√ß√£o de anomalias
  const isolationScore = await isolationForestModel(features);
  
  // One-Class SVM para detec√ß√£o de outliers
  const svmScore = await oneClassSVMModel(features);
  
  // Random Forest para classifica√ß√£o
  const rfScore = await randomForestModel(features);
  
  // Ensemble dos modelos
  const ensembleScore = (isolationScore * 0.4) + (svmScore * 0.3) + (rfScore * 0.3);
  
  return {
    score: ensembleScore,
    models: {
      isolationForest: isolationScore,
      oneClassSVM: svmScore,
      randomForest: rfScore
    },
    features: features
  };
}

/**
 * Verifica regras de neg√≥cio
 */
async function checkBusinessRules(activity: any, userHistory: any[]): Promise<RuleResults> {
  const rules = {
    // Valor muito alto para o perfil do usu√°rio
    highValue: checkHighValueRule(activity, userHistory),
    
    // Hor√°rio incomum
    unusualTime: checkUnusualTimeRule(activity),
    
    // Localiza√ß√£o suspeita
    suspiciousLocation: checkLocationRule(activity),
    
    // Muitas transa√ß√µes em pouco tempo
    highFrequency: checkFrequencyRule(activity, userHistory),
    
    // Padr√£o de transa√ß√µes suspeito
    suspiciousPattern: checkPatternRule(activity, userHistory)
  };
  
  const totalRules = Object.keys(rules).length;
  const violatedRules = Object.values(rules).filter(violated => violated).length;
  const score = violatedRules / totalRules;
  
  return {
    score,
    rules,
    violatedCount: violatedRules
  };
}

/**
 * Extrai features para modelos de ML
 */
function extractFeatures(activity: any, userHistory: any[], behaviorPatterns: any): any {
  return {
    // Features temporais
    hour: new Date(activity.timestamp).getHours(),
    dayOfWeek: new Date(activity.timestamp).getDay(),
    isWeekend: [0, 6].includes(new Date(activity.timestamp).getDay()),
    
    // Features de valor
    amount: activity.amount,
    amountRatio: activity.amount / (behaviorPatterns.averageTransaction || 1),
    
    // Features de localiza√ß√£o
    location: activity.location,
    isNewLocation: !userHistory.some(t => t.location === activity.location),
    
    // Features de dispositivo
    device: activity.device,
    isNewDevice: !userHistory.some(t => t.device_info === activity.device),
    
    // Features comportamentais
    loginFrequency: behaviorPatterns.loginFrequency,
    riskScore: behaviorPatterns.riskScore,
    
    // Features de frequ√™ncia
    transactionsLast24h: userHistory.filter(t => 
      new Date(t.created_at) > new Date(Date.now() - 24 * 60 * 60 * 1000)
    ).length,
    
    transactionsLastWeek: userHistory.filter(t => 
      new Date(t.created_at) > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)
    ).length
  };
}

/**
 * Modelo Isolation Forest (simulado)
 */
async function isolationForestModel(features: any): Promise<number> {
  // Simula√ß√£o de Isolation Forest
  const anomalyScore = Math.random() * 0.3; // Baixa probabilidade de anomalia
  return Math.min(1, anomalyScore);
}

/**
 * Modelo One-Class SVM (simulado)
 */
async function oneClassSVMModel(features: any): Promise<number> {
  // Simula√ß√£o de One-Class SVM
  const outlierScore = Math.random() * 0.4; // Baixa probabilidade de outlier
  return Math.min(1, outlierScore);
}

/**
 * Modelo Random Forest (simulado)
 */
async function randomForestModel(features: any): Promise<number> {
  // Simula√ß√£o de Random Forest
  const fraudScore = Math.random() * 0.5; // Baixa probabilidade de fraude
  return Math.min(1, fraudScore);
}

/**
 * Verifica regra de valor alto
 */
function checkHighValueRule(activity: any, userHistory: any[]): boolean {
  const averageAmount = userHistory.reduce((sum, t) => sum + parseFloat(t.amount), 0) / userHistory.length;
  return activity.amount > (averageAmount * 5); // 5x maior que a m√©dia
}

/**
 * Verifica regra de hor√°rio incomum
 */
function checkUnusualTimeRule(activity: any): boolean {
  const hour = new Date(activity.timestamp).getHours();
  return hour < 6 || hour > 22; // Fora do hor√°rio comercial
}

/**
 * Verifica regra de localiza√ß√£o
 */
function checkLocationRule(activity: any): boolean {
  // Simula√ß√£o de verifica√ß√£o de localiza√ß√£o suspeita
  const suspiciousCountries = ['XX', 'YY', 'ZZ']; // C√≥digos de pa√≠ses suspeitos
  return suspiciousCountries.includes(activity.location?.country);
}

/**
 * Verifica regra de frequ√™ncia
 */
function checkFrequencyRule(activity: any, userHistory: any[]): boolean {
  const recentTransactions = userHistory.filter(t => 
    new Date(t.created_at) > new Date(Date.now() - 60 * 60 * 1000) // √öltima hora
  );
  return recentTransactions.length > 10; // Mais de 10 transa√ß√µes na √∫ltima hora
}

/**
 * Verifica regra de padr√£o
 */
function checkPatternRule(activity: any, userHistory: any[]): boolean {
  // Verificar se segue padr√£o suspeito (ex: valores redondos, hor√°rios espec√≠ficos)
  const amount = activity.amount;
  const isRoundAmount = amount % 100 === 0; // Valores redondos
  const hour = new Date(activity.timestamp).getHours();
  const isSpecificHour = hour === 2 || hour === 3; // Hor√°rios espec√≠ficos
  
  return isRoundAmount && isSpecificHour;
}

/**
 * Determina n√≠vel de severidade
 */
function getSeverityLevel(score: number): string {
  if (score >= 0.8) return 'critical';
  if (score >= 0.6) return 'high';
  if (score >= 0.4) return 'medium';
  return 'low';
}

/**
 * Gera raz√£o da detec√ß√£o de fraude
 */
function generateFraudReason(mlResults: any, ruleResults: any): string {
  const reasons = [];
  
  if (mlResults.score > 0.7) {
    reasons.push('Padr√£o an√¥malo detectado por ML');
  }
  
  if (ruleResults.violatedCount > 0) {
    reasons.push(`${ruleResults.violatedCount} regra(s) de neg√≥cio violada(s)`);
  }
  
  return reasons.join(', ') || 'An√°lise de risco elevado';
}

/**
 * Gera resposta de detec√ß√£o de fraude
 */
function generateFraudResponse(fraudDetected: boolean, details: string, severity: string, confidence: number): string {
  if (fraudDetected) {
    return `üö® **Alerta de Seguran√ßa - Fraude Detectada**\n\n` +
           `‚ö†Ô∏è **Severidade**: ${severity.toUpperCase()}\n` +
           `üìä **Confian√ßa**: ${Math.round(confidence * 100)}%\n` +
           `üîç **Detalhes**: ${details}\n\n` +
           `üõ°Ô∏è **A√ß√µes Tomadas**:\n` +
           `‚Ä¢ Transa√ß√£o bloqueada\n` +
           `‚Ä¢ Equipe de seguran√ßa notificada\n` +
           `‚Ä¢ Log de auditoria criado\n\n` +
           `üìû **Pr√≥ximos Passos**:\n` +
           `‚Ä¢ Entre em contato conosco se esta transa√ß√£o for leg√≠tima\n` +
           `‚Ä¢ Verifique sua conta por atividades suspeitas\n` +
           `‚Ä¢ Considere alterar suas credenciais de acesso`;
  } else {
    return `‚úÖ **An√°lise de Seguran√ßa Completa**\n\n` +
           `üîç **Status**: Nenhuma fraude detectada\n` +
           `üìä **Confian√ßa**: ${Math.round(confidence * 100)}%\n` +
           `üõ°Ô∏è **Prote√ß√£o**: Sua transa√ß√£o est√° segura\n\n` +
           `üí° **Dica**: Continue monitorando suas transa√ß√µes regularmente para manter a seguran√ßa.`;
  }
}

// Tipos
interface FraudAnalysis {
  isFraudulent: boolean;
  confidence: number;
  severity: string;
  reason: string;
  factors?: any;
}

interface MLResults {
  score: number;
  models: any;
  features: any;
}

interface RuleResults {
  score: number;
  rules: any;
  violatedCount: number;
}