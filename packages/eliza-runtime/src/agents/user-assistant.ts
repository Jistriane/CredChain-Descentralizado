/**
 * User Assistant Agent - Agente de Suporte ao Usu√°rio
 * 
 * Fornece suporte e educa√ß√£o financeira aos usu√°rios
 */

import { Character, Action, ModelProviderName } from "@elizaos/core";

/**
 * Agente de Suporte ao Usu√°rio
 */
export const userAssistantAgent: Character = {
  name: "User Assistant",
  username: "assistant_ai",
  modelProvider: ModelProviderName.ANTHROPIC,
  
  bio: [
    "Sou seu assistente pessoal para quest√µes financeiras",
    "Ajudo com d√∫vidas sobre score, pagamentos e uso da plataforma",
    "Forne√ßo educa√ß√£o financeira de forma clara e acess√≠vel"
  ],
  
  knowledge: [
    "Educa√ß√£o financeira: or√ßamento, poupan√ßa, investimentos",
    "Score de cr√©dito: como funciona, como melhorar",
    "Produtos financeiros: cart√µes, empr√©stimos, financiamentos",
    "Plataforma CredChain: funcionalidades e navega√ß√£o",
    "Suporte t√©cnico: problemas comuns e solu√ß√µes"
  ],
  
  style: {
    all: [
      "Seja amig√°vel e prestativo",
      "Use linguagem simples e clara",
      "Seja paciente com d√∫vidas",
      "Forne√ßa exemplos pr√°ticos"
    ]
  },
  
  adjectives: ["amig√°vel", "prestativo", "educativo", "paciente", "claro"]
};

/**
 * A√ß√£o de Suporte ao Usu√°rio
 */
export const userSupportAction: Action = {
  name: "USER_SUPPORT",
  similes: ["ajudar usu√°rio", "suporte", "d√∫vida", "orienta√ß√£o", "assist√™ncia"],
  description: "Fornece suporte e orienta√ß√£o ao usu√°rio",
  
  validate: async (runtime: any, message: any) => {
    // Sempre v√°lido para suporte
    return true;
  },
  
  handler: async (runtime: any, message: any, state: any, options: any, callback: any) => {
    try {
      const { userId, question, context } = message.content;
      
      // Analisar tipo de pergunta
      const questionType = analyzeQuestionType(question);
      
      // Buscar informa√ß√µes relevantes
      const userInfo = await getUserInformation(userId, runtime);
      
      // Gerar resposta personalizada
      const response = await generateSupportResponse(questionType, question, userInfo, runtime);
      
      // Rastrear intera√ß√£o
      await runtime.adapters.analytics.trackEvent({
        eventName: 'user_support_interaction',
        userId,
        properties: {
          questionType,
          question: question.substring(0, 100), // Limitar tamanho
          responseGenerated: true
        }
      });
      
      callback({
        text: response,
        metadata: {
          questionType,
          personalized: true,
          timestamp: new Date().toISOString()
        }
      });
      
      return true;
    } catch (error) {
      console.error('Erro no suporte ao usu√°rio:', error);
      callback({
        text: "‚ùå Desculpe, ocorreu um erro. Nossa equipe foi notificada e entrar√° em contato em breve.",
        metadata: { error: true }
      });
      return false;
    }
  },
  
  examples: [
    [
      { 
        user: "{{user1}}", 
        content: { text: "Como posso melhorar meu score de cr√©dito?" } 
      },
      { 
        user: "{{agent}}", 
        content: { 
          text: "üìà **Como Melhorar Seu Score de Cr√©dito**\n\n" +
                "üéØ **Dicas Pr√°ticas**:\n\n" +
                "‚úÖ **Pague sempre em dia** (35% do score)\n" +
                "‚Ä¢ Configure lembretes ou d√©bito autom√°tico\n" +
                "‚Ä¢ Priorize contas essenciais\n\n" +
                "üí∞ **Mantenha baixa utiliza√ß√£o** (30% do score)\n" +
                "‚Ä¢ Use no m√°ximo 30% do limite do cart√£o\n" +
                "‚Ä¢ Evite gastar o limite total\n\n" +
                "‚è∞ **Mantenha hist√≥rico longo** (15% do score)\n" +
                "‚Ä¢ N√£o cancele cart√µes antigos\n" +
                "‚Ä¢ Continue usando cr√©dito responsavelmente\n\n" +
                "üí° **Dica Extra**: Monitore seu score regularmente no CredChain!" 
        } 
      }
    ]
  ]
};

/**
 * Analisa o tipo de pergunta do usu√°rio
 */
function analyzeQuestionType(question: string): string {
  const lowerQuestion = question.toLowerCase();
  
  // Score de cr√©dito
  if (lowerQuestion.includes('score') || lowerQuestion.includes('cr√©dito') || 
      lowerQuestion.includes('pontua√ß√£o')) {
    return 'credit_score';
  }
  
  // Pagamentos
  if (lowerQuestion.includes('pagamento') || lowerQuestion.includes('conta') || 
      lowerQuestion.includes('fatura')) {
    return 'payments';
  }
  
  // App/Plataforma
  if (lowerQuestion.includes('app') || lowerQuestion.includes('plataforma') || 
      lowerQuestion.includes('como usar') || lowerQuestion.includes('funcionalidade')) {
    return 'platform';
  }
  
  // Educa√ß√£o financeira
  if (lowerQuestion.includes('investimento') || lowerQuestion.includes('poupan√ßa') || 
      lowerQuestion.includes('finan√ßas') || lowerQuestion.includes('or√ßamento')) {
    return 'financial_education';
  }
  
  // Problemas t√©cnicos
  if (lowerQuestion.includes('erro') || lowerQuestion.includes('problema') || 
      lowerQuestion.includes('n√£o funciona') || lowerQuestion.includes('bug')) {
    return 'technical_issue';
  }
  
  // Seguran√ßa
  if (lowerQuestion.includes('seguran√ßa') || lowerQuestion.includes('fraude') || 
      lowerQuestion.includes('hack') || lowerQuestion.includes('roubo')) {
    return 'security';
  }
  
  // Geral
  return 'general';
}

/**
 * Busca informa√ß√µes do usu√°rio
 */
async function getUserInformation(userId: string, runtime: any): Promise<any> {
  try {
    // Buscar dados b√°sicos do usu√°rio
    const userResult = await runtime.adapters.database.query(
      'SELECT * FROM users WHERE id = $1',
      [userId]
    );
    
    // Buscar score atual
    const score = await runtime.adapters.blockchain.getCreditScore(userId);
    
    // Buscar hist√≥rico de pagamentos
    const payments = await runtime.adapters.database.query(
      'SELECT COUNT(*) as count, AVG(amount) as avg_amount FROM payments WHERE user_id = $1',
      [userId]
    );
    
    return {
      user: userResult.rows[0] || null,
      score: score,
      paymentStats: payments.rows[0] || { count: 0, avg_amount: 0 }
    };
  } catch (error) {
    console.error('Erro ao buscar informa√ß√µes do usu√°rio:', error);
    return {
      user: null,
      score: null,
      paymentStats: { count: 0, avg_amount: 0 }
    };
  }
}

/**
 * Gera resposta de suporte personalizada
 */
async function generateSupportResponse(questionType: string, question: string, userInfo: any, runtime: any): Promise<string> {
  switch (questionType) {
    case 'credit_score':
      return generateCreditScoreSupport(question, userInfo);
    
    case 'payments':
      return generatePaymentsSupport(question, userInfo);
    
    case 'platform':
      return generatePlatformSupport(question);
    
    case 'financial_education':
      return generateFinancialEducationSupport(question);
    
    case 'technical_issue':
      return generateTechnicalSupport(question);
    
    case 'security':
      return generateSecuritySupport(question);
    
    default:
      return generateGeneralSupport(question);
  }
}

/**
 * Gera suporte sobre score de cr√©dito
 */
function generateCreditScoreSupport(question: string, userInfo: any): string {
  const score = userInfo.score;
  const hasScore = score && score.score > 0;
  
  let response = "üìä **Suporte - Score de Cr√©dito**\n\n";
  
  if (hasScore) {
    response += `üéØ **Seu Score Atual**: ${score.score}/1000\n`;
    response += `üìÖ **√öltima Atualiza√ß√£o**: ${new Date(score.calculatedAt).toLocaleDateString('pt-BR')}\n\n`;
  }
  
  response += "**üí° Como Funciona o Score**:\n";
  response += "‚Ä¢ **Hist√≥rico de Pagamentos (35%)**: Pontualidade √© fundamental\n";
  response += "‚Ä¢ **Utiliza√ß√£o de Cr√©dito (30%)**: Mantenha baixo uso do limite\n";
  response += "‚Ä¢ **Idade do Cr√©dito (15%)**: Hist√≥rico longo √© melhor\n";
  response += "‚Ä¢ **Diversidade (10%)**: Diferentes tipos de cr√©dito\n";
  response += "‚Ä¢ **Novas Consultas (10%)**: Evite muitas simult√¢neas\n\n";
  
  response += "**üöÄ Dicas para Melhorar**:\n";
  response += "‚úÖ Pague sempre em dia\n";
  response += "‚úÖ Use no m√°ximo 30% do limite\n";
  response += "‚úÖ Mantenha contas antigas abertas\n";
  response += "‚úÖ Diversifique seus produtos\n";
  response += "‚úÖ Evite muitas consultas\n\n";
  
  if (!hasScore) {
    response += "**üìà Para Ter Seu Primeiro Score**:\n";
    response += "‚Ä¢ Complete seu cadastro\n";
    response += "‚Ä¢ Fa√ßa pelo menos 3 pagamentos\n";
    response += "‚Ä¢ Aguarde 30 dias para o primeiro c√°lculo\n";
  }
  
  return response;
}

/**
 * Gera suporte sobre pagamentos
 */
function generatePaymentsSupport(question: string, userInfo: any): string {
  const paymentStats = userInfo.paymentStats;
  
  let response = "üí≥ **Suporte - Pagamentos**\n\n";
  
  if (paymentStats.count > 0) {
    response += `üìä **Seu Hist√≥rico**:\n`;
    response += `‚Ä¢ Total de pagamentos: ${paymentStats.count}\n`;
    response += `‚Ä¢ Valor m√©dio: R$ ${parseFloat(paymentStats.avg_amount).toFixed(2)}\n\n`;
  }
  
  response += "**üí° Dicas para Pagamentos**:\n";
  response += "‚úÖ Configure lembretes autom√°ticos\n";
  response += "‚úÖ Use d√©bito autom√°tico quando poss√≠vel\n";
  response += "‚úÖ Priorize contas essenciais\n";
  response += "‚úÖ Mantenha um calend√°rio de vencimentos\n\n";
  
  response += "**üö® Em Caso de Atraso**:\n";
  response += "‚Ä¢ Pague o mais r√°pido poss√≠vel\n";
  response += "‚Ä¢ Entre em contato com o credor\n";
  response += "‚Ä¢ Negocie condi√ß√µes se necess√°rio\n";
  response += "‚Ä¢ Evite acumular mais atrasos\n\n";
  
  response += "**üì± Funcionalidades do App**:\n";
  response += "‚Ä¢ Hist√≥rico completo de pagamentos\n";
  response += "‚Ä¢ Lembretes personalizados\n";
  response += "‚Ä¢ An√°lise de padr√µes\n";
  response += "‚Ä¢ Alertas de vencimento\n";
  
  return response;
}

/**
 * Gera suporte sobre a plataforma
 */
function generatePlatformSupport(question: string): string {
  return "üì± **Suporte - Plataforma CredChain**\n\n" +
         "**üéØ Principais Funcionalidades**:\n\n" +
         "üìä **Dashboard**:\n" +
         "‚Ä¢ Visualize seu score atual\n" +
         "‚Ä¢ Acompanhe hist√≥rico de pagamentos\n" +
         "‚Ä¢ Receba insights personalizados\n\n" +
         "üí¨ **Chat com IA**:\n" +
         "‚Ä¢ Tire d√∫vidas sobre cr√©dito\n" +
         "‚Ä¢ Receba conselhos financeiros\n" +
         "‚Ä¢ An√°lise de padr√µes suspeitos\n\n" +
         "üîî **Notifica√ß√µes**:\n" +
         "‚Ä¢ Alertas de vencimento\n" +
         "‚Ä¢ Atualiza√ß√µes de score\n" +
         "‚Ä¢ Dicas personalizadas\n\n" +
         "üìà **Analytics**:\n" +
         "‚Ä¢ Gr√°ficos de evolu√ß√£o\n" +
         "‚Ä¢ Compara√ß√£o com m√©dia\n" +
         "‚Ä¢ Proje√ß√µes futuras\n\n" +
         "**üÜò Precisa de Mais Ajuda?**:\n" +
         "‚Ä¢ Central de Ajuda: help.credchain.com\n" +
         "‚Ä¢ Email: suporte@credchain.com\n" +
         "‚Ä¢ WhatsApp: (11) 99999-9999";
}

/**
 * Gera suporte sobre educa√ß√£o financeira
 */
function generateFinancialEducationSupport(question: string): string {
  return "üéì **Educa√ß√£o Financeira**\n\n" +
         "**üí∞ Or√ßamento Pessoal**:\n" +
         "‚Ä¢ 50% para necessidades (moradia, alimenta√ß√£o)\n" +
         "‚Ä¢ 30% para desejos (lazer, entretenimento)\n" +
         "‚Ä¢ 20% para investimentos e emerg√™ncias\n\n" +
         "**üè¶ Reserva de Emerg√™ncia**:\n" +
         "‚Ä¢ 6 meses de gastos essenciais\n" +
         "‚Ä¢ Mantenha em conta de alta liquidez\n" +
         "‚Ä¢ N√£o use para investimentos arriscados\n\n" +
         "**üí≥ Uso Consciente do Cr√©dito**:\n" +
         "‚Ä¢ Use apenas para necessidades\n" +
         "‚Ä¢ Pague sempre o valor total\n" +
         "‚Ä¢ Evite parcelamentos desnecess√°rios\n" +
         "‚Ä¢ Monitore seu limite dispon√≠vel\n\n" +
         "**üìà Investimentos B√°sicos**:\n" +
         "‚Ä¢ Comece com renda fixa (CDB, LCI, LCA)\n" +
         "‚Ä¢ Diversifique seus investimentos\n" +
         "‚Ä¢ Invista regularmente (mesmo pequenos valores)\n" +
         "‚Ä¢ Estude antes de investir\n\n" +
         "**üìö Recursos Educativos**:\n" +
         "‚Ä¢ Blog CredChain: artigos semanais\n" +
         "‚Ä¢ Webinars: toda quinta-feira\n" +
         "‚Ä¢ E-book gratuito: 'Finan√ßas Pessoais 101'";
}

/**
 * Gera suporte t√©cnico
 */
function generateTechnicalSupport(question: string): string {
  return "üîß **Suporte T√©cnico**\n\n" +
         "**üì± Problemas Comuns no App**:\n\n" +
         "**App n√£o abre**:\n" +
         "‚Ä¢ Verifique se est√° atualizado\n" +
         "‚Ä¢ Reinicie o aplicativo\n" +
         "‚Ä¢ Desinstale e reinstale se necess√°rio\n\n" +
         "**Login n√£o funciona**:\n" +
         "‚Ä¢ Verifique email e senha\n" +
         "‚Ä¢ Use 'Esqueci minha senha'\n" +
         "‚Ä¢ Verifique conex√£o com internet\n\n" +
         "**Dados n√£o atualizam**:\n" +
         "‚Ä¢ Aguarde alguns minutos\n" +
         "‚Ä¢ Fa√ßa logout e login novamente\n" +
         "‚Ä¢ Verifique sua conex√£o\n\n" +
         "**üîç Diagn√≥stico R√°pido**:\n" +
         "1. Reinicie o app\n" +
         "2. Verifique a internet\n" +
         "3. Atualize o app\n" +
         "4. Entre em contato conosco\n\n" +
         "**üìû Contato T√©cnico**:\n" +
         "‚Ä¢ Email: tech@credchain.com\n" +
         "‚Ä¢ WhatsApp: (11) 99999-8888\n" +
         "‚Ä¢ Hor√°rio: 8h √†s 18h (seg-sex)";
}

/**
 * Gera suporte sobre seguran√ßa
 */
function generateSecuritySupport(question: string): string {
  return "üîí **Seguran√ßa da Conta**\n\n" +
         "**üõ°Ô∏è Proteja Sua Conta**:\n\n" +
         "**Senha Forte**:\n" +
         "‚Ä¢ Use pelo menos 8 caracteres\n" +
         "‚Ä¢ Combine letras, n√∫meros e s√≠mbolos\n" +
         "‚Ä¢ N√£o use informa√ß√µes pessoais\n" +
         "‚Ä¢ Troque regularmente\n\n" +
         "**üîê Autentica√ß√£o**:\n" +
         "‚Ä¢ Ative autentica√ß√£o de dois fatores\n" +
         "‚Ä¢ Use biometria quando dispon√≠vel\n" +
         "‚Ä¢ N√£o compartilhe c√≥digos\n" +
         "‚Ä¢ Desconfie de links suspeitos\n\n" +
         "**üì± Dispositivo Seguro**:\n" +
         "‚Ä¢ Mantenha o sistema atualizado\n" +
         "‚Ä¢ Use antiv√≠rus confi√°vel\n" +
         "‚Ä¢ Evite redes Wi-Fi p√∫blicas\n" +
         "‚Ä¢ Fa√ßa logout em dispositivos compartilhados\n\n" +
         "**üö® Sinais de Alerta**:\n" +
         "‚Ä¢ Transa√ß√µes n√£o autorizadas\n" +
         "‚Ä¢ Mudan√ßas n√£o solicitadas\n" +
         "‚Ä¢ Emails suspeitos\n" +
         "‚Ä¢ Acesso de locais estranhos\n\n" +
         "**üìû Em Caso de Problema**:\n" +
         "‚Ä¢ Bloqueie a conta imediatamente\n" +
         "‚Ä¢ Entre em contato conosco\n" +
         "‚Ä¢ Altere todas as senhas\n" +
         "‚Ä¢ Monitore suas contas";
}

/**
 * Gera suporte geral
 */
function generateGeneralSupport(question: string): string {
  return "üëã **Como Posso Ajudar?**\n\n" +
         "Estou aqui para esclarecer suas d√∫vidas sobre:\n\n" +
         "üìä **Score de Cr√©dito**: Como funciona e como melhorar\n" +
         "üí≥ **Pagamentos**: Hist√≥rico, pontualidade e dicas\n" +
         "üì± **App CredChain**: Funcionalidades e navega√ß√£o\n" +
         "üéì **Educa√ß√£o Financeira**: Or√ßamento, investimentos, poupan√ßa\n" +
         "üîí **Seguran√ßa**: Prote√ß√£o da conta e dados\n" +
         "üîß **Problemas T√©cnicos**: Bugs, erros e solu√ß√µes\n\n" +
         "**üí¨ Dica**: Seja espec√≠fico na sua pergunta para receber uma resposta mais precisa!\n\n" +
         "**üìû Outros Canais**:\n" +
         "‚Ä¢ Email: suporte@credchain.com\n" +
         "‚Ä¢ WhatsApp: (11) 99999-9999\n" +
         "‚Ä¢ Central de Ajuda: help.credchain.com";
}