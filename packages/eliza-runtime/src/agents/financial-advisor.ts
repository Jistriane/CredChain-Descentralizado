/**
 * Financial Advisor Agent - Agente de Conselhos Financeiros
 * 
 * Fornece recomenda√ß√µes financeiras personalizadas
 */

import { Character, Action, ModelProviderName } from "@elizaos/core";

/**
 * Agente de Conselhos Financeiros
 */
export const financialAdvisorAgent: Character = {
  name: "Financial Advisor",
  username: "advisor_ai",
  modelProvider: ModelProviderName.ANTHROPIC,
  
  bio: [
    "Especialista em conselhos financeiros personalizados",
    "Analiso seu perfil para recomenda√ß√µes adequadas",
    "Ajuda a construir um futuro financeiro s√≥lido"
  ],
  
  knowledge: [
    "Investimentos: renda fixa, vari√°vel, fundos, a√ß√µes",
    "Planejamento financeiro: or√ßamento, metas, reserva",
    "Produtos banc√°rios: contas, cart√µes, empr√©stimos",
    "Educa√ß√£o financeira: conceitos e pr√°ticas",
    "An√°lise de risco: perfil do investidor, diversifica√ß√£o"
  ],
  
  style: {
    all: [
      "Seja consultivo e educativo",
      "Adapte conselhos ao perfil do usu√°rio",
      "Use dados para fundamentar recomenda√ß√µes",
      "Mantenha tom profissional mas acess√≠vel"
    ]
  },
  
  adjectives: ["consultivo", "educativo", "personalizado", "preciso", "confi√°vel"]
};

/**
 * A√ß√£o de Conselhos Financeiros
 */
export const financialAdviceAction: Action = {
  name: "FINANCIAL_ADVICE",
  similes: ["conselho financeiro", "recomenda√ß√£o", "orienta√ß√£o", "sugest√£o", "dica"],
  description: "Fornece conselhos financeiros personalizados",
  
  validate: async (runtime: any, message: any) => {
    // Sempre v√°lido para conselhos financeiros
    return true;
  },
  
  handler: async (runtime: any, message: any, state: any, options: any, callback: any) => {
    try {
      const { userId, topic, context } = message.content;
      
      // Analisar perfil do usu√°rio
      const userProfile = await analyzeUserProfile(userId, runtime);
      
      // Determinar tipo de conselho
      const adviceType = determineAdviceType(topic, context);
      
      // Gerar conselho personalizado
      const advice = await generatePersonalizedAdvice(adviceType, userProfile, runtime);
      
      // Rastrear intera√ß√£o
      await runtime.adapters.analytics.trackEvent({
        eventName: 'financial_advice_given',
        userId,
        properties: {
          adviceType,
          userProfile: userProfile.riskLevel,
          personalized: true
        }
      });
      
      callback({
        text: advice,
        metadata: {
          adviceType,
          personalized: true,
          userProfile: userProfile.riskLevel,
          timestamp: new Date().toISOString()
        }
      });
      
      return true;
    } catch (error) {
      console.error('Erro ao gerar conselho financeiro:', error);
      callback({
        text: "‚ùå Desculpe, n√£o consegui gerar um conselho personalizado no momento. Tente novamente em alguns instantes.",
        metadata: { error: true }
      });
      return false;
    }
  },
  
  examples: [
    [
      { 
        user: "{{user1}}", 
        content: { text: "Quero come√ßar a investir, por onde come√ßar?" } 
      },
      { 
        user: "{{agent}}", 
        content: { 
          text: "üéØ **Plano de Investimentos Personalizado**\n\n" +
                "**üìä Seu Perfil**: Conservador (baseado no seu score de 750)\n\n" +
                "**üöÄ Primeiros Passos**:\n" +
                "1. **Reserva de Emerg√™ncia** (6 meses de gastos)\n" +
                "2. **Renda Fixa** (CDB, LCI, LCA)\n" +
                "3. **Fundos Conservadores** (DI, Renda Fixa)\n\n" +
                "**üí∞ Sugest√µes Espec√≠ficas**:\n" +
                "‚Ä¢ CDB 100% CDI (liquidez di√°ria)\n" +
                "‚Ä¢ LCI/LCA (isento de IR)\n" +
                "‚Ä¢ Fundo DI (diversifica√ß√£o)\n\n" +
                "**üìà Pr√≥ximos Passos**:\n" +
                "‚Ä¢ Ap√≥s 6 meses, considere fundos mistos\n" +
                "‚Ä¢ Estude sobre a√ß√µes (comece com ETFs)\n" +
                "‚Ä¢ Mantenha disciplina nos aportes\n\n" +
                "üí° **Dica**: Comece com R$ 100/m√™s e aumente gradualmente!" 
        } 
      }
    ]
  ]
};

/**
 * Analisa perfil do usu√°rio
 */
async function analyzeUserProfile(userId: string, runtime: any): Promise<UserProfile> {
  try {
    // Buscar score de cr√©dito
    const score = await runtime.adapters.blockchain.getCreditScore(userId);
    
    // Buscar hist√≥rico de pagamentos
    const payments = await runtime.adapters.database.query(
      `SELECT 
        amount, 
        created_at, 
        status
      FROM payments 
      WHERE user_id = $1 
      ORDER BY created_at DESC 
      LIMIT 50`,
      [userId]
    );
    
    // Buscar dados demogr√°ficos
    const userData = await runtime.adapters.database.query(
      'SELECT age, income, occupation FROM users WHERE id = $1',
      [userId]
    );
    
    // Calcular perfil de risco
    const riskLevel = calculateRiskLevel(score, payments.rows, userData.rows[0]);
    
    // Calcular capacidade de investimento
    const investmentCapacity = calculateInvestmentCapacity(userData.rows[0], payments.rows);
    
    return {
      userId,
      score: score?.score || 0,
      riskLevel,
      investmentCapacity,
      paymentHistory: payments.rows,
      demographics: userData.rows[0] || {},
      lastUpdated: new Date().toISOString()
    };
  } catch (error) {
    console.error('Erro ao analisar perfil do usu√°rio:', error);
    return {
      userId,
      score: 0,
      riskLevel: 'conservative',
      investmentCapacity: 'low',
      paymentHistory: [],
      demographics: {},
      lastUpdated: new Date().toISOString()
    };
  }
}

/**
 * Calcula perfil de risco do usu√°rio
 */
function calculateRiskLevel(score: any, payments: any[], demographics: any): string {
  let riskScore = 0;
  
  // Fator score de cr√©dito (0-3 pontos)
  if (score && score.score >= 800) riskScore += 3;
  else if (score && score.score >= 700) riskScore += 2;
  else if (score && score.score >= 600) riskScore += 1;
  
  // Fator hist√≥rico de pagamentos (0-2 pontos)
  const onTimeRate = payments.filter(p => p.status === 'paid').length / payments.length;
  if (onTimeRate >= 0.95) riskScore += 2;
  else if (onTimeRate >= 0.85) riskScore += 1;
  
  // Fator idade (0-2 pontos)
  if (demographics.age) {
    if (demographics.age < 30) riskScore += 2;
    else if (demographics.age < 50) riskScore += 1;
  }
  
  // Fator renda (0-2 pontos)
  if (demographics.income) {
    if (demographics.income > 10000) riskScore += 2;
    else if (demographics.income > 5000) riskScore += 1;
  }
  
  // Classificar perfil
  if (riskScore >= 7) return 'aggressive';
  if (riskScore >= 4) return 'moderate';
  return 'conservative';
}

/**
 * Calcula capacidade de investimento
 */
function calculateInvestmentCapacity(demographics: any, payments: any[]): string {
  const income = demographics.income || 0;
  const avgPayment = payments.reduce((sum, p) => sum + parseFloat(p.amount), 0) / payments.length;
  
  // Estimar capacidade baseada na renda e gastos
  const estimatedSavings = income * 0.2; // 20% da renda para investimentos
  
  if (estimatedSavings >= 2000) return 'high';
  if (estimatedSavings >= 500) return 'medium';
  return 'low';
}

/**
 * Determina tipo de conselho
 */
function determineAdviceType(topic: string, context: any): string {
  const lowerTopic = topic.toLowerCase();
  
  if (lowerTopic.includes('investimento') || lowerTopic.includes('investir')) {
    return 'investment';
  }
  
  if (lowerTopic.includes('or√ßamento') || lowerTopic.includes('budget')) {
    return 'budgeting';
  }
  
  if (lowerTopic.includes('poupan√ßa') || lowerTopic.includes('reserva')) {
    return 'savings';
  }
  
  if (lowerTopic.includes('aposentadoria') || lowerTopic.includes('aposentar')) {
    return 'retirement';
  }
  
  if (lowerTopic.includes('d√≠vida') || lowerTopic.includes('empr√©stimo')) {
    return 'debt_management';
  }
  
  if (lowerTopic.includes('casa') || lowerTopic.includes('im√≥vel')) {
    return 'real_estate';
  }
  
  return 'general';
}

/**
 * Gera conselho personalizado
 */
async function generatePersonalizedAdvice(adviceType: string, userProfile: UserProfile, runtime: any): Promise<string> {
  switch (adviceType) {
    case 'investment':
      return generateInvestmentAdvice(userProfile);
    
    case 'budgeting':
      return generateBudgetingAdvice(userProfile);
    
    case 'savings':
      return generateSavingsAdvice(userProfile);
    
    case 'retirement':
      return generateRetirementAdvice(userProfile);
    
    case 'debt_management':
      return generateDebtAdvice(userProfile);
    
    case 'real_estate':
      return generateRealEstateAdvice(userProfile);
    
    default:
      return generateGeneralAdvice(userProfile);
  }
}

/**
 * Gera conselho sobre investimentos
 */
function generateInvestmentAdvice(userProfile: UserProfile): string {
  const { riskLevel, investmentCapacity, score } = userProfile;
  
  let advice = "üíº **Estrat√©gia de Investimentos Personalizada**\n\n";
  
  advice += `üìä **Seu Perfil**: ${getRiskLevelDescription(riskLevel)}\n`;
  advice += `üí∞ **Capacidade**: ${getCapacityDescription(investmentCapacity)}\n`;
  advice += `üéØ **Score**: ${score}/1000\n\n`;
  
  if (riskLevel === 'conservative') {
    advice += "**üõ°Ô∏è Estrat√©gia Conservadora**:\n";
    advice += "‚Ä¢ 70% Renda Fixa (CDB, LCI, LCA)\n";
    advice += "‚Ä¢ 20% Fundos Conservadores\n";
    advice += "‚Ä¢ 10% Fundos Mistos\n\n";
    advice += "**üìà Produtos Recomendados**:\n";
    advice += "‚Ä¢ CDB 100% CDI (liquidez)\n";
    advice += "‚Ä¢ LCI/LCA (isento de IR)\n";
    advice += "‚Ä¢ Fundo DI (diversifica√ß√£o)\n";
    advice += "‚Ä¢ Tesouro Selic (seguran√ßa)\n";
  } else if (riskLevel === 'moderate') {
    advice += "**‚öñÔ∏è Estrat√©gia Moderada**:\n";
    advice += "‚Ä¢ 50% Renda Fixa\n";
    advice += "‚Ä¢ 30% Fundos Mistos\n";
    advice += "‚Ä¢ 20% Renda Vari√°vel\n\n";
    advice += "**üìà Produtos Recomendados**:\n";
    advice += "‚Ä¢ Fundos Multimercado\n";
    advice += "‚Ä¢ ETFs de √çndices\n";
    advice += "‚Ä¢ A√ß√µes Blue Chips\n";
    advice += "‚Ä¢ Fundos de A√ß√µes\n";
  } else {
    advice += "**üöÄ Estrat√©gia Agressiva**:\n";
    advice += "‚Ä¢ 30% Renda Fixa\n";
    advice += "‚Ä¢ 40% Renda Vari√°vel\n";
    advice += "‚Ä¢ 30% Alternativos\n\n";
    advice += "**üìà Produtos Recomendados**:\n";
    advice += "‚Ä¢ A√ß√µes Individuais\n";
    advice += "‚Ä¢ ETFs Espec√≠ficos\n";
    advice += "‚Ä¢ Fundos de A√ß√µes\n";
    advice += "‚Ä¢ REITs (Fundos Imobili√°rios)\n";
  }
  
  advice += "\n**üí° Dicas Importantes**:\n";
  advice += "‚Ä¢ Diversifique sempre\n";
  advice += "‚Ä¢ Invista regularmente\n";
  advice += "‚Ä¢ Mantenha disciplina\n";
  advice += "‚Ä¢ Revise periodicamente\n";
  
  return advice;
}

/**
 * Gera conselho sobre or√ßamento
 */
function generateBudgetingAdvice(userProfile: UserProfile): string {
  return "üìä **Planejamento Or√ßament√°rio Personalizado**\n\n" +
         "**üí∞ Regra 50-30-20**:\n" +
         "‚Ä¢ 50% Necessidades (moradia, alimenta√ß√£o, transporte)\n" +
         "‚Ä¢ 30% Desejos (lazer, entretenimento, hobbies)\n" +
         "‚Ä¢ 20% Investimentos e emerg√™ncias\n\n" +
         "**üì± Ferramentas Recomendadas**:\n" +
         "‚Ä¢ App CredChain (controle de gastos)\n" +
         "‚Ä¢ Planilha Excel (or√ßamento detalhado)\n" +
         "‚Ä¢ Apps de controle financeiro\n\n" +
         "**üéØ Metas Sugeridas**:\n" +
         "‚Ä¢ Reserva de emerg√™ncia (6 meses)\n" +
         "‚Ä¢ Reduzir d√≠vidas de alto custo\n" +
         "‚Ä¢ Aumentar aportes em investimentos\n\n" +
         "**üìà Pr√≥ximos Passos**:\n" +
         "‚Ä¢ Fa√ßa um diagn√≥stico mensal\n" +
         "‚Ä¢ Ajuste conforme necess√°rio\n" +
         "‚Ä¢ Celebre pequenas conquistas";
}

/**
 * Gera conselho sobre poupan√ßa
 */
function generateSavingsAdvice(userProfile: UserProfile): string {
  return "üè¶ **Estrat√©gia de Poupan√ßa Inteligente**\n\n" +
         "**üéØ Objetivos de Poupan√ßa**:\n" +
         "‚Ä¢ Reserva de emerg√™ncia (6 meses)\n" +
         "‚Ä¢ Metas de curto prazo (1-2 anos)\n" +
         "‚Ä¢ Metas de m√©dio prazo (3-5 anos)\n" +
         "‚Ä¢ Metas de longo prazo (5+ anos)\n\n" +
         "**üí∞ Onde Guardar**:\n" +
         "‚Ä¢ Conta corrente (gastos do dia)\n" +
         "‚Ä¢ Poupan√ßa (reserva de emerg√™ncia)\n" +
         "‚Ä¢ CDB (reserva + rendimento)\n" +
         "‚Ä¢ Fundos DI (reserva + liquidez)\n\n" +
         "**üìà Estrat√©gias**:\n" +
         "‚Ä¢ Automatize transfer√™ncias\n" +
         "‚Ä¢ Use a regra do 'pagamento a si mesmo'\n" +
         "‚Ä¢ Separe por objetivos\n" +
         "‚Ä¢ Revise mensalmente\n\n" +
         "**üí° Dicas Pr√°ticas**:\n" +
         "‚Ä¢ Comece com 10% da renda\n" +
         "‚Ä¢ Aumente gradualmente\n" +
         "‚Ä¢ Use aplicativos de controle\n" +
         "‚Ä¢ Evite tocar na reserva";
}

/**
 * Gera conselho sobre aposentadoria
 */
function generateRetirementAdvice(userProfile: UserProfile): string {
  return "üë¥ **Planejamento para Aposentadoria**\n\n" +
         "**‚è∞ Tempo √© Seu Aliado**:\n" +
         "‚Ä¢ Quanto mais cedo come√ßar, melhor\n" +
         "‚Ä¢ Juros compostos fazem a diferen√ßa\n" +
         "‚Ä¢ Pequenos valores se tornam grandes\n\n" +
         "**üí∞ Produtos para Aposentadoria**:\n" +
         "‚Ä¢ PGBL (Plano Gerador de Benef√≠cio Livre)\n" +
         "‚Ä¢ VGBL (Vida Gerador de Benef√≠cio Livre)\n" +
         "‚Ä¢ Tesouro IPCA+ (prote√ß√£o inflacion√°ria)\n" +
         "‚Ä¢ Fundos de Longo Prazo\n\n" +
         "**üìä Estrat√©gia por Idade**:\n" +
         "‚Ä¢ 20-30 anos: 70% vari√°vel, 30% fixa\n" +
         "‚Ä¢ 30-40 anos: 60% vari√°vel, 40% fixa\n" +
         "‚Ä¢ 40-50 anos: 50% vari√°vel, 50% fixa\n" +
         "‚Ä¢ 50+ anos: 30% vari√°vel, 70% fixa\n\n" +
         "**üéØ Metas Realistas**:\n" +
         "‚Ä¢ Calcule suas necessidades futuras\n" +
         "‚Ä¢ Considere infla√ß√£o e longevidade\n" +
         "‚Ä¢ Diversifique as fontes de renda\n" +
         "‚Ä¢ Revise anualmente o plano";
}

/**
 * Gera conselho sobre gest√£o de d√≠vidas
 */
function generateDebtAdvice(userProfile: UserProfile): string {
  return "üí≥ **Gest√£o Inteligente de D√≠vidas**\n\n" +
         "**üìä Avalie Sua Situa√ß√£o**:\n" +
         "‚Ä¢ Liste todas as d√≠vidas\n" +
         "‚Ä¢ Calcule juros e prazos\n" +
         "‚Ä¢ Priorize por custo-benef√≠cio\n\n" +
         "**üéØ Estrat√©gias de Pagamento**:\n" +
         "‚Ä¢ M√©todo da Bola de Neve (menores valores)\n" +
         "‚Ä¢ M√©todo da Avalanche (maiores juros)\n" +
         "‚Ä¢ Reestrutura√ß√£o de d√≠vidas\n" +
         "‚Ä¢ Renegocia√ß√£o com credores\n\n" +
         "**üí∞ Reduza Custos**:\n" +
         "‚Ä¢ Transfira d√≠vidas para cart√µes com menor juros\n" +
         "‚Ä¢ Use empr√©stimos pessoais para quitar cart√µes\n" +
         "‚Ä¢ Negocie prazos e valores\n" +
         "‚Ä¢ Evite novos empr√©stimos\n\n" +
         "**üìà Reconstrua o Cr√©dito**:\n" +
         "‚Ä¢ Pague sempre em dia\n" +
         "‚Ä¢ Mantenha baixa utiliza√ß√£o\n" +
         "‚Ä¢ N√£o cancele cart√µes antigos\n" +
         "‚Ä¢ Monitore seu score regularmente";
}

/**
 * Gera conselho sobre im√≥veis
 */
function generateRealEstateAdvice(userProfile: UserProfile): string {
  return "üè† **Investimento Imobili√°rio**\n\n" +
         "**üìä Avalie Sua Capacidade**:\n" +
         "‚Ä¢ Renda mensal x 30% (m√°ximo para financiamento)\n" +
         "‚Ä¢ Entrada de 20% (m√≠nimo recomendado)\n" +
         "‚Ä¢ Reserva para custos extras (ITBI, cart√≥rio, etc.)\n\n" +
         "**üèòÔ∏è Op√ß√µes de Investimento**:\n" +
         "‚Ä¢ Im√≥vel pr√≥prio (moradia)\n" +
         "‚Ä¢ Im√≥vel para aluguel (renda passiva)\n" +
         "‚Ä¢ Fundos Imobili√°rios (FIIs)\n" +
         "‚Ä¢ Crowdfunding imobili√°rio\n\n" +
         "**üí∞ An√°lise de Viabilidade**:\n" +
         "‚Ä¢ Localiza√ß√£o estrat√©gica\n" +
         "‚Ä¢ Potencial de valoriza√ß√£o\n" +
         "‚Ä¢ Facilidade de aluguel\n" +
         "‚Ä¢ Custos de manuten√ß√£o\n\n" +
         "**üìà Estrat√©gias**:\n" +
         "‚Ä¢ Comece com FIIs (menor capital)\n" +
         "‚Ä¢ Estude o mercado local\n" +
         "‚Ä¢ Considere financiamento\n" +
         "‚Ä¢ Diversifique o portf√≥lio";
}

/**
 * Gera conselho geral
 */
function generateGeneralAdvice(userProfile: UserProfile): string {
  return "üí° **Conselhos Financeiros Gerais**\n\n" +
         "**üéØ Princ√≠pios Fundamentais**:\n" +
         "‚Ä¢ Gaste menos do que ganha\n" +
         "‚Ä¢ Invista regularmente\n" +
         "‚Ä¢ Diversifique sempre\n" +
         "‚Ä¢ Tenha paci√™ncia\n\n" +
         "**üìä Seu Perfil Atual**:\n" +
         `‚Ä¢ Score: ${userProfile.score}/1000\n` +
         `‚Ä¢ Perfil de Risco: ${getRiskLevelDescription(userProfile.riskLevel)}\n` +
         `‚Ä¢ Capacidade: ${getCapacityDescription(userProfile.investmentCapacity)}\n\n` +
         "**üöÄ Pr√≥ximos Passos**:\n" +
         "‚Ä¢ Construa sua reserva de emerg√™ncia\n" +
         "‚Ä¢ Estude sobre investimentos\n" +
         "‚Ä¢ Defina metas claras\n" +
         "‚Ä¢ Monitore seu progresso\n\n" +
         "**üìö Recursos Educativos**:\n" +
         "‚Ä¢ Blog CredChain\n" +
         "‚Ä¢ Webinars semanais\n" +
         "‚Ä¢ E-books gratuitos\n" +
         "‚Ä¢ Comunidade de investidores";
}

/**
 * Obt√©m descri√ß√£o do perfil de risco
 */
function getRiskLevelDescription(riskLevel: string): string {
  switch (riskLevel) {
    case 'conservative': return 'Conservador (prioriza seguran√ßa)';
    case 'moderate': return 'Moderado (equil√≠brio risco/retorno)';
    case 'aggressive': return 'Agressivo (busca maior retorno)';
    default: return 'N√£o definido';
  }
}

/**
 * Obt√©m descri√ß√£o da capacidade de investimento
 */
function getCapacityDescription(capacity: string): string {
  switch (capacity) {
    case 'low': return 'Baixa (at√© R$ 500/m√™s)';
    case 'medium': return 'M√©dia (R$ 500-2.000/m√™s)';
    case 'high': return 'Alta (acima de R$ 2.000/m√™s)';
    default: return 'N√£o definida';
  }
}

// Tipos
interface UserProfile {
  userId: string;
  score: number;
  riskLevel: string;
  investmentCapacity: string;
  paymentHistory: any[];
  demographics: any;
  lastUpdated: string;
}