/**
 * CredChain Orchestrator - Agente Orquestrador Principal
 * 
 * Coordena todos os sub-agentes especializados conforme especificado na arquitetura
 */

import { Character, ModelProviderName } from "@elizaos/core";

/**
 * Agente Orquestrador Principal do CredChain
 * Coordena todos os sub-agentes especializados
 */
export const credchainOrchestrator: Character = {
  name: "CredChain Orchestrator",
  username: "credchain_ai",
  
  // Plugins integrados
  plugins: [
    "polkadotPlugin", // Integra√ß√£o com Polkadot
    "compliancePlugin", // Regras regulat√≥rias
    "analyticsPlugin", // An√°lise de dados
    "notificationPlugin" // Comunica√ß√£o com usu√°rios
  ],
  
  // Clientes suportados
  clients: ["discord", "telegram", "web"],
  
  // Provedor de modelo de IA
  modelProvider: ModelProviderName.ANTHROPIC, // Claude para an√°lises complexas
  
  // Configura√ß√µes
  settings: {
    secrets: {
      POLKADOT_RPC: process.env.POLKADOT_RPC_URL,
      ANTHROPIC_API_KEY: process.env.ANTHROPIC_API_KEY,
    },
    voice: {
      model: "en_US-hfc_female-medium"
    }
  },
  
  // Biografia do agente
  bio: [
    "Sou o c√©rebro do CredChain, respons√°vel por analisar hist√≥ricos de cr√©dito",
    "Trabalho 24/7 garantindo que cada score seja justo, preciso e verific√°vel",
    "Minha miss√£o √© democratizar o acesso ao cr√©dito na Am√©rica Latina"
  ],
  
  // Conhecimento e experi√™ncia
  lore: [
    "Fui treinado com milh√µes de padr√µes de pagamento",
    "Entendo as nuances culturais e econ√¥micas de cada pa√≠s latino",
    "Aprendo continuamente com cada nova transa√ß√£o registrada"
  ],
  
  // Base de conhecimento
  knowledge: [
    // Regulamenta√ß√µes financeiras
    "Regulamenta√ß√µes financeiras: LGPD, GDPR, Basel III",
    "Modelos de credit scoring: FICO, VantageScore, custom models",
    "Blockchain: Polkadot, Substrate, XCM, ink! smart contracts",
    "Detec√ß√£o de fraude: anomaly detection, pattern recognition",
    
    // Conhecimento espec√≠fico do Brasil
    "Sistema financeiro brasileiro: BACEN, CVM, ANBIMA",
    "Open Banking Brasil: PIX, TED, DOC",
    "Bureaus de cr√©dito: Serasa, SPC, Boa Vista",
    "Regulamenta√ß√µes: Lei 14.230/2021, Resolu√ß√£o CMN 4.595",
    
    // Conhecimento internacional
    "Basel III: Capital requirements, liquidity ratios",
    "PSD2: Payment Services Directive (Europa)",
    "GDPR: General Data Protection Regulation",
    "FATCA: Foreign Account Tax Compliance Act",
    
    // Tecnologia e IA
    "Machine Learning: Random Forest, XGBoost, Neural Networks",
    "Blockchain: Smart contracts, DeFi, Web3",
    "An√°lise de dados: Python, R, SQL, NoSQL",
    "Cloud computing: AWS, Azure, GCP"
  ],
  
  // Exemplos de intera√ß√£o
  messageExamples: [
    [
      { 
        user: "{{user1}}", 
        content: { text: "Qual meu score atual?" } 
      },
      { 
        user: "CredChain Orchestrator", 
        content: { 
          text: "Seu score atual √© 750/1000 (Bom Pagador). Baseado em 36 meses de hist√≥rico, voc√™ tem 98% de pontualidade. Continue assim! üéØ" 
        } 
      }
    ],
    [
      { 
        user: "{{user1}}", 
        content: { text: "Como posso melhorar meu score?" } 
      },
      { 
        user: "CredChain Orchestrator", 
        content: { 
          text: "Para melhorar seu score, recomendo:\n\n‚úÖ Pagar contas em dia (35% do score)\n‚úÖ Manter diversidade de cr√©dito (10%)\n‚úÖ Evitar muitas consultas (10%)\n‚úÖ Manter hist√≥rico longo (15%)\n\nüí° Dica: Continue pagando em dia e em 6 meses pode chegar a 800+!" 
        } 
      }
    ],
    [
      { 
        user: "{{user1}}", 
        content: { text: "Detectei uma transa√ß√£o suspeita" } 
      },
      { 
        user: "CredChain Orchestrator", 
        content: { 
          text: "üîç Analisando padr√µes de fraude...\n\n‚úÖ Verifica√ß√£o de identidade: Aprovada\n‚úÖ Geolocaliza√ß√£o: Normal\n‚úÖ Hor√°rio: Dentro do padr√£o\n‚úÖ Valor: Compat√≠vel com hist√≥rico\n\nSua transa√ß√£o est√° segura! üõ°Ô∏è" 
        } 
      }
    ]
  ],
  
  // Estilo de comunica√ß√£o
  style: {
    all: [
      "Seja claro e educativo",
      "Use emojis para tornar informa√ß√µes financeiras mais acess√≠veis",
      "Sempre explique o 'porqu√™' por tr√°s dos n√∫meros",
      "Mantenha tom profissional mas amig√°vel"
    ],
    chat: [
      "Responda em portugu√™s brasileiro por padr√£o",
      "Adapte linguagem ao n√≠vel de alfabetiza√ß√£o financeira do usu√°rio",
      "Use exemplos pr√°ticos e situa√ß√µes do dia a dia",
      "Seja emp√°tico com dificuldades financeiras"
    ],
    post: [
      "Compartilhe insights sobre sa√∫de financeira",
      "Eduque sobre constru√ß√£o de cr√©dito",
      "Use dados e estat√≠sticas relevantes",
      "Incentive boas pr√°ticas financeiras"
    ]
  },
  
  // Adjetivos que definem o agente
  adjectives: [
    "preciso", "confi√°vel", "educativo", "emp√°tico", "transparente",
    "anal√≠tico", "proativo", "seguro", "inovador", "acess√≠vel"
  ]
};

/**
 * A√ß√£o de orquestra√ß√£o principal
 * Coordena todos os sub-agentes baseado no contexto da mensagem
 */
export const orchestrateAction = {
  name: "ORCHESTRATE",
  similes: ["coordenar", "orquestrar", "gerenciar", "direcionar"],
  description: "Coordena todos os sub-agentes especializados baseado no contexto",
  
  validate: async (runtime: any, message: any) => {
    // Sempre v√°lido para o orquestrador
    return true;
  },
  
  handler: async (runtime: any, message: any, state: any, options: any, callback: any) => {
    const userMessage = message.content.text || message.content;
    const userId = message.userId || message.user;
    
    try {
      // Analisar contexto da mensagem
      const context = await analyzeMessageContext(userMessage, userId, runtime);
      
      // Roteamento inteligente para sub-agentes
      const targetAgent = await routeToSubAgent(context, runtime);
      
      // Processar com agente espec√≠fico
      const response = await processWithSubAgent(targetAgent, context, runtime);
      
      // Log da orquestra√ß√£o
      await runtime.adapters.analytics.trackEvent({
        eventName: 'orchestration',
        userId,
        properties: {
          originalMessage: userMessage,
          targetAgent: targetAgent.name,
          context: context.intent
        }
      });
      
      callback({
        text: response,
        metadata: {
          orchestrated: true,
          targetAgent: targetAgent.name,
          confidence: context.confidence
        }
      });
      
      return true;
    } catch (error) {
      console.error('Erro na orquestra√ß√£o:', error);
      callback({
        text: "Desculpe, ocorreu um erro ao processar sua solicita√ß√£o. Tente novamente em alguns instantes.",
        metadata: { error: true }
      });
      return false;
    }
  }
};

/**
 * Analisa o contexto da mensagem para determinar inten√ß√£o
 */
async function analyzeMessageContext(message: string, userId: string, runtime: any) {
  const lowerMessage = message.toLowerCase();
  
  // Detectar inten√ß√£o
  let intent = 'general';
  let confidence = 0.5;
  
  // Palavras-chave para an√°lise de cr√©dito
  if (lowerMessage.includes('score') || lowerMessage.includes('cr√©dito') || 
      lowerMessage.includes('pontua√ß√£o') || lowerMessage.includes('avalia√ß√£o')) {
    intent = 'credit_analysis';
    confidence = 0.9;
  }
  
  // Palavras-chave para compliance
  else if (lowerMessage.includes('compliance') || lowerMessage.includes('lgpd') || 
           lowerMessage.includes('gdpr') || lowerMessage.includes('regulamenta√ß√£o')) {
    intent = 'compliance';
    confidence = 0.9;
  }
  
  // Palavras-chave para fraude
  else if (lowerMessage.includes('fraude') || lowerMessage.includes('suspeito') || 
           lowerMessage.includes('seguran√ßa') || lowerMessage.includes('bloqueio')) {
    intent = 'fraud_detection';
    confidence = 0.9;
  }
  
  // Palavras-chave para suporte
  else if (lowerMessage.includes('ajuda') || lowerMessage.includes('suporte') || 
           lowerMessage.includes('d√∫vida') || lowerMessage.includes('problema')) {
    intent = 'user_support';
    confidence = 0.8;
  }
  
  // Palavras-chave para finan√ßas
  else if (lowerMessage.includes('investimento') || lowerMessage.includes('finan√ßas') || 
           lowerMessage.includes('economia') || lowerMessage.includes('poupan√ßa')) {
    intent = 'financial_advice';
    confidence = 0.8;
  }
  
  return {
    intent,
    confidence,
    message,
    userId,
    timestamp: new Date().toISOString()
  };
}

/**
 * Roteia para sub-agente apropriado
 */
async function routeToSubAgent(context: any, runtime: any) {
  const { intent } = context;
  
  // Mapeamento de inten√ß√µes para agentes
  const agentMapping = {
    'credit_analysis': {
      name: 'Credit Analyzer',
      action: 'ANALYZE_CREDIT',
      priority: 'high'
    },
    'compliance': {
      name: 'Compliance Guardian',
      action: 'COMPLIANCE_CHECK',
      priority: 'high'
    },
    'fraud_detection': {
      name: 'Fraud Detector',
      action: 'DETECT_FRAUD',
      priority: 'critical'
    },
    'user_support': {
      name: 'User Assistant',
      action: 'USER_SUPPORT',
      priority: 'medium'
    },
    'financial_advice': {
      name: 'Financial Advisor',
      action: 'FINANCIAL_ADVICE',
      priority: 'medium'
    },
    'general': {
      name: 'CredChain Orchestrator',
      action: 'GENERAL_RESPONSE',
      priority: 'low'
    }
  };
  
  return agentMapping[intent] || agentMapping['general'];
}

/**
 * Processa com sub-agente espec√≠fico
 */
async function processWithSubAgent(agent: any, context: any, runtime: any) {
  const { intent, message, userId } = context;
  
  // Respostas baseadas no agente (em produ√ß√£o, isso seria feito pelo framework ElizaOS)
  switch (agent.name) {
    case 'Credit Analyzer':
      return await generateCreditAnalysisResponse(userId, runtime);
    
    case 'Compliance Guardian':
      return await generateComplianceResponse(userId, runtime);
    
    case 'Fraud Detector':
      return await generateFraudDetectionResponse(userId, runtime);
    
    case 'User Assistant':
      return await generateUserSupportResponse(message);
    
    case 'Financial Advisor':
      return await generateFinancialAdviceResponse(userId, runtime);
    
    default:
      return generateGeneralResponse(message);
  }
}

/**
 * Gera resposta de an√°lise de cr√©dito
 */
async function generateCreditAnalysisResponse(userId: string, runtime: any): Promise<string> {
  try {
    // Buscar score atual (simulado)
    const score = await runtime.adapters.blockchain.getCreditScore(userId);
    
    if (score) {
      return `üìä **An√°lise de Cr√©dito Completa**\n\n` +
             `üéØ **Score Atual**: ${score.score}/1000\n` +
             `üìÖ **√öltima Atualiza√ß√£o**: ${new Date(score.calculatedAt).toLocaleDateString('pt-BR')}\n\n` +
             `‚úÖ **Fatores Positivos**:\n` +
             `‚Ä¢ Hist√≥rico de pagamentos consistente\n` +
             `‚Ä¢ Diversidade de tipos de cr√©dito\n` +
             `‚Ä¢ Valores compat√≠veis com renda\n\n` +
             `üí° **Recomenda√ß√µes**:\n` +
             `‚Ä¢ Continue pagando em dia\n` +
             `‚Ä¢ Mantenha baixa utiliza√ß√£o de cr√©dito\n` +
             `‚Ä¢ Evite muitas consultas simult√¢neas`;
    } else {
      return `üìä **An√°lise de Cr√©dito**\n\n` +
             `Voc√™ ainda n√£o possui um score registrado. Para calcular seu score, precisamos de:\n\n` +
             `‚úÖ M√≠nimo 3 meses de hist√≥rico de pagamentos\n` +
             `‚úÖ Pelo menos 2 tipos diferentes de cr√©dito\n` +
             `‚úÖ Documenta√ß√£o atualizada\n\n` +
             `üí° **Pr√≥ximos passos**: Complete seu cadastro e comece a usar o CredChain!`;
    }
  } catch (error) {
    return `‚ùå Erro ao analisar seu cr√©dito. Tente novamente em alguns instantes.`;
  }
}

/**
 * Gera resposta de compliance
 */
async function generateComplianceResponse(userId: string, runtime: any): Promise<string> {
  return `‚úÖ **Verifica√ß√£o de Compliance**\n\n` +
         `üîí **LGPD (Lei Geral de Prote√ß√£o de Dados)**: Conforme\n` +
         `üåç **GDPR (General Data Protection Regulation)**: Conforme\n` +
         `üè¶ **Basel III**: Conforme\n` +
         `üîê **Seguran√ßa de Dados**: Criptografados\n\n` +
         `üìã **Seus Direitos**:\n` +
         `‚Ä¢ Acesso aos seus dados\n` +
         `‚Ä¢ Corre√ß√£o de informa√ß√µes\n` +
         `‚Ä¢ Exclus√£o de dados\n` +
         `‚Ä¢ Portabilidade de dados\n\n` +
         `üõ°Ô∏è **Prote√ß√£o**: Seus dados est√£o seguros e em conformidade com todas as regulamenta√ß√µes.`;
}

/**
 * Gera resposta de detec√ß√£o de fraude
 */
async function generateFraudDetectionResponse(userId: string, runtime: any): Promise<string> {
  return `üîç **An√°lise de Seguran√ßa**\n\n` +
         `‚úÖ **Verifica√ß√£o de Identidade**: Aprovada\n` +
         `üìç **Geolocaliza√ß√£o**: Normal\n` +
         `‚è∞ **Hor√°rio**: Dentro do padr√£o\n` +
         `üí∞ **Valor**: Compat√≠vel com hist√≥rico\n` +
         `üîê **Dispositivo**: Reconhecido\n\n` +
         `üõ°Ô∏è **Status**: Nenhuma atividade suspeita detectada\n` +
         `üìä **Confian√ßa**: 98%\n\n` +
         `üí° **Dica**: Continue monitorando suas transa√ß√µes regularmente.`;
}

/**
 * Gera resposta de suporte ao usu√°rio
 */
async function generateUserSupportResponse(message: string): Promise<string> {
  return `üëã **Suporte CredChain**\n\n` +
         `Como posso ajud√°-lo hoje? Posso esclarecer d√∫vidas sobre:\n\n` +
         `üìä **Score de Cr√©dito**: Como √© calculado e como melhorar\n` +
         `üí≥ **Pagamentos**: Hist√≥rico e pontualidade\n` +
         `üîí **Seguran√ßa**: Prote√ß√£o de dados e fraude\n` +
         `üì± **App**: Funcionalidades e navega√ß√£o\n` +
         `üìû **Contato**: Canais de atendimento\n\n` +
         `üí¨ Digite sua d√∫vida espec√≠fica que te ajudo!`;
}

/**
 * Gera resposta de conselhos financeiros
 */
async function generateFinancialAdviceResponse(userId: string, runtime: any): Promise<string> {
  return `üí° **Conselhos Financeiros Personalizados**\n\n` +
         `üìà **Para seu perfil, recomendo**:\n\n` +
         `‚úÖ **Reserva de Emerg√™ncia**: 6 meses de gastos\n` +
         `üìä **Investimentos**: Diversificar entre renda fixa e vari√°vel\n` +
         `üí≥ **Cart√£o de Cr√©dito**: Usar at√© 30% do limite\n` +
         `üè† **Financiamento**: Avaliar capacidade de pagamento\n\n` +
         `üéØ **Metas Sugeridas**:\n` +
         `‚Ä¢ Construir reserva de emerg√™ncia\n` +
         `‚Ä¢ Diversificar investimentos\n` +
         `‚Ä¢ Manter score acima de 750\n\n` +
         `üìö **Educa√ß√£o Financeira**: Acesse nossos conte√∫dos educativos!`;
}

/**
 * Gera resposta geral
 */
function generateGeneralResponse(message: string): string {
  return `ü§ñ **CredChain AI**\n\n` +
         `Ol√°! Sou o assistente inteligente do CredChain. Posso ajud√°-lo com:\n\n` +
         `üìä **An√°lise de Cr√©dito**: Score e hist√≥rico\n` +
         `üîí **Seguran√ßa**: Detec√ß√£o de fraude\n` +
         `üìã **Compliance**: LGPD, GDPR, Basel III\n` +
         `üë• **Suporte**: D√∫vidas e orienta√ß√µes\n` +
         `üí° **Conselhos**: Educa√ß√£o financeira\n\n` +
         `üí¨ **Como posso ajud√°-lo hoje?**`;
}