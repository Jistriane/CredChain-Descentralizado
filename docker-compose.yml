version: '3.8'

services:
  # Substrate Node (Blockchain Local)
  substrate-node:
    image: parity/substrate:latest
    ports:
      - "9944:9944"  # WebSocket
      - "9933:9933"  # HTTP RPC
    command: --dev --ws-external --rpc-external --rpc-cors all
    volumes:
      - substrate_data:/data
    environment:
      - RUST_LOG=info
    
  # PostgreSQL (Dados Relacionais)
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: credchain
      POSTGRES_USER: credchain
      POSTGRES_PASSWORD: dev_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U credchain"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  # MongoDB (Dados NÃ£o-Relacionais)
  mongodb:
    image: mongo:7
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: credchain
      MONGO_INITDB_ROOT_PASSWORD: dev_password
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  # Redis (Cache + Queue)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    
  # ElizaOS Agent Runtime
  eliza-runtime:
    build: 
      context: ./packages/eliza-runtime
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      substrate-node:
        condition: service_started
    environment:
      DATABASE_URL: postgresql://credchain:dev_password@postgres:5432/credchain
      REDIS_URL: redis://redis:6379
      SUBSTRATE_WS: ws://substrate-node:9944
      NODE_ENV: development
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      POLKADOT_RPC_URL: ws://substrate-node:9944
    ports:
      - "3000:3000"
    volumes:
      - ./packages/eliza-runtime:/app
      - /app/node_modules
      
  # API Gateway
  api-gateway:
    build: 
      context: ./packages/api-gateway
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      eliza-runtime:
        condition: service_started
    ports:
      - "4000:4000"
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://credchain:dev_password@postgres:5432/credchain
      MONGODB_URL: mongodb://credchain:dev_password@mongodb:27017/credchain
      REDIS_URL: redis://redis:6379
      ELIZA_RUNTIME_URL: http://eliza-runtime:3000
      SUBSTRATE_WS: ws://substrate-node:9944
    volumes:
      - ./packages/api-gateway:/app
      - /app/node_modules
      
  # Frontend Web (Next.js)
  web-frontend:
    build:
      context: ./packages/web-frontend
      dockerfile: Dockerfile
    depends_on:
      - api-gateway
    ports:
      - "3001:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:4000
      NEXT_PUBLIC_ELIZA_URL: http://localhost:3000
    volumes:
      - ./packages/web-frontend:/app
      - /app/node_modules
      
  # Mobile Backend (React Native Metro)
  mobile-backend:
    build:
      context: ./packages/mobile-backend
      dockerfile: Dockerfile
    depends_on:
      - api-gateway
    ports:
      - "8081:8081"
    environment:
      API_URL: http://api-gateway:4000
    volumes:
      - ./packages/mobile-backend:/app
      - /app/node_modules

volumes:
  postgres_data:
  mongo_data:
  redis_data:
  substrate_data:

networks:
  default:
    name: credchain-network
